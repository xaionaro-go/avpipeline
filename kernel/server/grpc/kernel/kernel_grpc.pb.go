// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package kernel

import (
	context "context"
	libav "github.com/xaionaro-go/avpipeline/protobuf/libav"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// KernelClient is the client API for Kernel service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KernelClient interface {
	SendInputPacket(ctx context.Context, in *SendInputPacketRequest, opts ...grpc.CallOption) (*SendInputPacketReply, error)
	SendInputFrame(ctx context.Context, in *SendInputFrameRequest, opts ...grpc.CallOption) (*SendInputFrameReply, error)
	String(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*wrapperspb.StringValue, error)
	Close(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CloseChan(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Kernel_CloseChanClient, error)
	GeneratePackets(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Kernel_GeneratePacketsClient, error)
	GenerateFrame(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Kernel_GenerateFrameClient, error)
	GetOutputFormatContext(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetOutputFormatContextReply, error)
	GetInputFormatContext(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetInputFormatContextReply, error)
	NotifyAboutPacketFormatContext(ctx context.Context, in *NotifyAboutPacketFormatContextRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type kernelClient struct {
	cc grpc.ClientConnInterface
}

func NewKernelClient(cc grpc.ClientConnInterface) KernelClient {
	return &kernelClient{cc}
}

func (c *kernelClient) SendInputPacket(ctx context.Context, in *SendInputPacketRequest, opts ...grpc.CallOption) (*SendInputPacketReply, error) {
	out := new(SendInputPacketReply)
	err := c.cc.Invoke(ctx, "/kernel.Kernel/SendInputPacket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kernelClient) SendInputFrame(ctx context.Context, in *SendInputFrameRequest, opts ...grpc.CallOption) (*SendInputFrameReply, error) {
	out := new(SendInputFrameReply)
	err := c.cc.Invoke(ctx, "/kernel.Kernel/SendInputFrame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kernelClient) String(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*wrapperspb.StringValue, error) {
	out := new(wrapperspb.StringValue)
	err := c.cc.Invoke(ctx, "/kernel.Kernel/String", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kernelClient) Close(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/kernel.Kernel/Close", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kernelClient) CloseChan(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Kernel_CloseChanClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Kernel_serviceDesc.Streams[0], "/kernel.Kernel/CloseChan", opts...)
	if err != nil {
		return nil, err
	}
	x := &kernelCloseChanClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Kernel_CloseChanClient interface {
	Recv() (*emptypb.Empty, error)
	grpc.ClientStream
}

type kernelCloseChanClient struct {
	grpc.ClientStream
}

func (x *kernelCloseChanClient) Recv() (*emptypb.Empty, error) {
	m := new(emptypb.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *kernelClient) GeneratePackets(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Kernel_GeneratePacketsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Kernel_serviceDesc.Streams[1], "/kernel.Kernel/GeneratePackets", opts...)
	if err != nil {
		return nil, err
	}
	x := &kernelGeneratePacketsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Kernel_GeneratePacketsClient interface {
	Recv() (*libav.Packet, error)
	grpc.ClientStream
}

type kernelGeneratePacketsClient struct {
	grpc.ClientStream
}

func (x *kernelGeneratePacketsClient) Recv() (*libav.Packet, error) {
	m := new(libav.Packet)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *kernelClient) GenerateFrame(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Kernel_GenerateFrameClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Kernel_serviceDesc.Streams[2], "/kernel.Kernel/GenerateFrame", opts...)
	if err != nil {
		return nil, err
	}
	x := &kernelGenerateFrameClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Kernel_GenerateFrameClient interface {
	Recv() (*libav.Frame, error)
	grpc.ClientStream
}

type kernelGenerateFrameClient struct {
	grpc.ClientStream
}

func (x *kernelGenerateFrameClient) Recv() (*libav.Frame, error) {
	m := new(libav.Frame)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *kernelClient) GetOutputFormatContext(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetOutputFormatContextReply, error) {
	out := new(GetOutputFormatContextReply)
	err := c.cc.Invoke(ctx, "/kernel.Kernel/GetOutputFormatContext", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kernelClient) GetInputFormatContext(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetInputFormatContextReply, error) {
	out := new(GetInputFormatContextReply)
	err := c.cc.Invoke(ctx, "/kernel.Kernel/GetInputFormatContext", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kernelClient) NotifyAboutPacketFormatContext(ctx context.Context, in *NotifyAboutPacketFormatContextRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/kernel.Kernel/NotifyAboutPacketFormatContext", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KernelServer is the server API for Kernel service.
// All implementations must embed UnimplementedKernelServer
// for forward compatibility
type KernelServer interface {
	SendInputPacket(context.Context, *SendInputPacketRequest) (*SendInputPacketReply, error)
	SendInputFrame(context.Context, *SendInputFrameRequest) (*SendInputFrameReply, error)
	String(context.Context, *emptypb.Empty) (*wrapperspb.StringValue, error)
	Close(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	CloseChan(*emptypb.Empty, Kernel_CloseChanServer) error
	GeneratePackets(*emptypb.Empty, Kernel_GeneratePacketsServer) error
	GenerateFrame(*emptypb.Empty, Kernel_GenerateFrameServer) error
	GetOutputFormatContext(context.Context, *emptypb.Empty) (*GetOutputFormatContextReply, error)
	GetInputFormatContext(context.Context, *emptypb.Empty) (*GetInputFormatContextReply, error)
	NotifyAboutPacketFormatContext(context.Context, *NotifyAboutPacketFormatContextRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedKernelServer()
}

// UnimplementedKernelServer must be embedded to have forward compatible implementations.
type UnimplementedKernelServer struct {
}

func (UnimplementedKernelServer) SendInputPacket(context.Context, *SendInputPacketRequest) (*SendInputPacketReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendInputPacket not implemented")
}
func (UnimplementedKernelServer) SendInputFrame(context.Context, *SendInputFrameRequest) (*SendInputFrameReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendInputFrame not implemented")
}
func (UnimplementedKernelServer) String(context.Context, *emptypb.Empty) (*wrapperspb.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method String not implemented")
}
func (UnimplementedKernelServer) Close(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Close not implemented")
}
func (UnimplementedKernelServer) CloseChan(*emptypb.Empty, Kernel_CloseChanServer) error {
	return status.Errorf(codes.Unimplemented, "method CloseChan not implemented")
}
func (UnimplementedKernelServer) GeneratePackets(*emptypb.Empty, Kernel_GeneratePacketsServer) error {
	return status.Errorf(codes.Unimplemented, "method GeneratePackets not implemented")
}
func (UnimplementedKernelServer) GenerateFrame(*emptypb.Empty, Kernel_GenerateFrameServer) error {
	return status.Errorf(codes.Unimplemented, "method GenerateFrame not implemented")
}
func (UnimplementedKernelServer) GetOutputFormatContext(context.Context, *emptypb.Empty) (*GetOutputFormatContextReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOutputFormatContext not implemented")
}
func (UnimplementedKernelServer) GetInputFormatContext(context.Context, *emptypb.Empty) (*GetInputFormatContextReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInputFormatContext not implemented")
}
func (UnimplementedKernelServer) NotifyAboutPacketFormatContext(context.Context, *NotifyAboutPacketFormatContextRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyAboutPacketFormatContext not implemented")
}
func (UnimplementedKernelServer) mustEmbedUnimplementedKernelServer() {}

// UnsafeKernelServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KernelServer will
// result in compilation errors.
type UnsafeKernelServer interface {
	mustEmbedUnimplementedKernelServer()
}

func RegisterKernelServer(s *grpc.Server, srv KernelServer) {
	s.RegisterService(&_Kernel_serviceDesc, srv)
}

func _Kernel_SendInputPacket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendInputPacketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KernelServer).SendInputPacket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kernel.Kernel/SendInputPacket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KernelServer).SendInputPacket(ctx, req.(*SendInputPacketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kernel_SendInputFrame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendInputFrameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KernelServer).SendInputFrame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kernel.Kernel/SendInputFrame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KernelServer).SendInputFrame(ctx, req.(*SendInputFrameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kernel_String_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KernelServer).String(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kernel.Kernel/String",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KernelServer).String(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kernel_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KernelServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kernel.Kernel/Close",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KernelServer).Close(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kernel_CloseChan_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KernelServer).CloseChan(m, &kernelCloseChanServer{stream})
}

type Kernel_CloseChanServer interface {
	Send(*emptypb.Empty) error
	grpc.ServerStream
}

type kernelCloseChanServer struct {
	grpc.ServerStream
}

func (x *kernelCloseChanServer) Send(m *emptypb.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func _Kernel_GeneratePackets_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KernelServer).GeneratePackets(m, &kernelGeneratePacketsServer{stream})
}

type Kernel_GeneratePacketsServer interface {
	Send(*libav.Packet) error
	grpc.ServerStream
}

type kernelGeneratePacketsServer struct {
	grpc.ServerStream
}

func (x *kernelGeneratePacketsServer) Send(m *libav.Packet) error {
	return x.ServerStream.SendMsg(m)
}

func _Kernel_GenerateFrame_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KernelServer).GenerateFrame(m, &kernelGenerateFrameServer{stream})
}

type Kernel_GenerateFrameServer interface {
	Send(*libav.Frame) error
	grpc.ServerStream
}

type kernelGenerateFrameServer struct {
	grpc.ServerStream
}

func (x *kernelGenerateFrameServer) Send(m *libav.Frame) error {
	return x.ServerStream.SendMsg(m)
}

func _Kernel_GetOutputFormatContext_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KernelServer).GetOutputFormatContext(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kernel.Kernel/GetOutputFormatContext",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KernelServer).GetOutputFormatContext(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kernel_GetInputFormatContext_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KernelServer).GetInputFormatContext(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kernel.Kernel/GetInputFormatContext",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KernelServer).GetInputFormatContext(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kernel_NotifyAboutPacketFormatContext_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyAboutPacketFormatContextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KernelServer).NotifyAboutPacketFormatContext(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kernel.Kernel/NotifyAboutPacketFormatContext",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KernelServer).NotifyAboutPacketFormatContext(ctx, req.(*NotifyAboutPacketFormatContextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Kernel_serviceDesc = grpc.ServiceDesc{
	ServiceName: "kernel.Kernel",
	HandlerType: (*KernelServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendInputPacket",
			Handler:    _Kernel_SendInputPacket_Handler,
		},
		{
			MethodName: "SendInputFrame",
			Handler:    _Kernel_SendInputFrame_Handler,
		},
		{
			MethodName: "String",
			Handler:    _Kernel_String_Handler,
		},
		{
			MethodName: "Close",
			Handler:    _Kernel_Close_Handler,
		},
		{
			MethodName: "GetOutputFormatContext",
			Handler:    _Kernel_GetOutputFormatContext_Handler,
		},
		{
			MethodName: "GetInputFormatContext",
			Handler:    _Kernel_GetInputFormatContext_Handler,
		},
		{
			MethodName: "NotifyAboutPacketFormatContext",
			Handler:    _Kernel_NotifyAboutPacketFormatContext_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CloseChan",
			Handler:       _Kernel_CloseChan_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GeneratePackets",
			Handler:       _Kernel_GeneratePackets_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GenerateFrame",
			Handler:       _Kernel_GenerateFrame_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "kernel.proto",
}
