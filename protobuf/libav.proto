syntax = "proto3";
package libav;
option go_package = "github.com/xaionaro-go/avpipeline/protobuf/libav;libav";

message SideDataElement {
  uint32 type = 1;
  bytes data = 2;
}

message SideData {
  repeated SideDataElement elements = 1;
}

message Rational {
  int64 N = 1;
  int64 D = 2;
}

message Packet {
  int64 pts = 1;
  int64 dts = 2;
  bytes data = 3;
  int32 streamIndex = 4;
  uint32 flags = 5;
  SideData sideData = 6;
  int64 duration = 7;
  int64 pos = 8;
  Rational timeBase = 9;
}

message ChannelLayout {
  uint32 order = 1;
  int32 nbChannels = 2;
  uint64 u = 3;
}

message CodecParameters {
  int32 codecType = 1;
  uint32 codecID = 2;
  uint32 codecTag = 3;
  bytes extraData = 4;
  SideData codedSideData = 5;
  int32 format = 6;
  int64 bitRate = 7;
  int32 bitsPerCodecSample = 8;
  int32 bitsPerRawSample = 9;
  int32 profile = 10;
  int32 level = 11;
  int32 width = 12;
  int32 height = 13;
  Rational sampleAspectRatio = 14;
  Rational framerate = 15;
  uint32 fieldOrder = 16;
  uint32 colorRange = 17;
  uint32 colorTRC = 18;
  uint32 colorSpace = 19;
  uint32 chromaLocation = 20;
  int32 videoDelay = 21;
  ChannelLayout chLayout = 22;
  int32 sampleRate = 23;
  int32 blockAlign = 24;
  int32 frameSize = 25;
  int32 initialPadding = 26;
  int32 trailingPadding = 27;
  int32 seekPreroll = 28;
}

message DictionaryItem {
  string key = 1;
  string value = 2;
}

message Dictionary {
  repeated DictionaryItem items = 1;
}

message Stream {
  int32 index = 1;
  CodecParameters codecParameters = 2;
  Rational timeBase = 3;
  int64 startTime = 4;
  int64 duration = 5;
  int64 nbFrames = 6;
  int32 disposition = 7;
  int32 discard = 8;
  Rational sampleAspectRatio = 9;
  Dictionary Metadata = 10;
  Rational avgFrameRate = 11;
  Packet AttachedPic = 12;
  SideData SideData = 13;
  int32 eventFlags = 14;
  Rational rFrameRate = 15;
  int32 ptsWrapBits = 16;
}

message Frame {
  repeated bytes data = 1;
  repeated int32 linesize = 2;
  repeated bytes extendedData = 3;
  int32 width = 4;
  int32 height = 5;
  int32 nbSamples = 6;
  int32 format = 7;
  int32 keyFrame = 8;
  uint32 pictType = 9;
  Rational sampleAspectRatio = 10;
  int64 pts = 11;
  int64 pkt_dts = 12;
  Rational timeBase = 13;
  int32 quality = 14;
  int32 repeatPict = 15;
  int32 interlacedFrame = 16;
  int32 topFieldFirst = 17;
  int32 paletteHasChanged = 18;
  int32 sampleRate = 19;
  SideData sideData = 20;
  int32 flags = 21;
  uint32 colorRange = 22;
  uint32 colorTRC = 23;
  uint32 colorSpace = 24;
  uint32 chromaLocation = 25;
  int64 bestEffortTimestamp = 26;
  int64 pktPos = 27;
  Dictionary metadata = 28;
  int32 decodeErrorFlags = 29;
  int32 pktSize = 30;
  uint64 cropTop = 31;
  uint64 cropBottom = 32;
  uint64 cropLeft = 33;
  uint64 cropRight = 34;
  ChannelLayout chLayout = 35;
  int64 duration = 36;
}

message Class {

}

message CodecContext {
  Class avClass = 1;
  int32 logLevelOffset = 2;
  int32 codecType = 3;
  uint32 codecID = 4;
  uint32 codecTag = 5;
  
}

/*
type _Ctype_struct_AVCodecContext struct {
	av_class			*_Ctype_struct_AVClass
	log_level_offset		_Ctype_int
	codec_type			int32
	codec				*_Ctype_struct_AVCodec
	codec_id			uint32
	codec_tag			_Ctype_uint
	priv_data			unsafe.Pointer
	internal			*_Ctype_struct_AVCodecInternal
	opaque				unsafe.Pointer
	bit_rate			_Ctype_int64_t
	flags				_Ctype_int
	flags2				_Ctype_int
	extradata			*_Ctype_uint8_t
	extradata_size			_Ctype_int
	time_base			_Ctype_struct_AVRational
	pkt_timebase			_Ctype_struct_AVRational
	framerate			_Ctype_struct_AVRational
	ticks_per_frame			_Ctype_int
	delay				_Ctype_int
	width				_Ctype_int
	height				_Ctype_int
	coded_width			_Ctype_int
	coded_height			_Ctype_int
	sample_aspect_ratio		_Ctype_struct_AVRational
	pix_fmt				int32
	sw_pix_fmt			int32
	color_primaries			uint32
	color_trc			uint32
	colorspace			uint32
	color_range			uint32
	chroma_sample_location		uint32
	field_order			uint32
	refs				_Ctype_int
	has_b_frames			_Ctype_int
	slice_flags			_Ctype_int
	draw_horiz_band			*[0]byte
	get_format			*[0]byte
	max_b_frames			_Ctype_int
	b_quant_factor			_Ctype_float
	b_quant_offset			_Ctype_float
	i_quant_factor			_Ctype_float
	i_quant_offset			_Ctype_float
	lumi_masking			_Ctype_float
	temporal_cplx_masking		_Ctype_float
	spatial_cplx_masking		_Ctype_float
	p_masking			_Ctype_float
	dark_masking			_Ctype_float
	nsse_weight			_Ctype_int
	me_cmp				_Ctype_int
	me_sub_cmp			_Ctype_int
	mb_cmp				_Ctype_int
	ildct_cmp			_Ctype_int
	dia_size			_Ctype_int
	last_predictor_count		_Ctype_int
	me_pre_cmp			_Ctype_int
	pre_dia_size			_Ctype_int
	me_subpel_quality		_Ctype_int
	me_range			_Ctype_int
	mb_decision			_Ctype_int
	intra_matrix			*_Ctype_uint16_t
	inter_matrix			*_Ctype_uint16_t
	chroma_intra_matrix		*_Ctype_uint16_t
	intra_dc_precision		_Ctype_int
	mb_lmin				_Ctype_int
	mb_lmax				_Ctype_int
	bidir_refine			_Ctype_int
	keyint_min			_Ctype_int
	gop_size			_Ctype_int
	mv0_threshold			_Ctype_int
	slices				_Ctype_int
	sample_rate			_Ctype_int
	sample_fmt			int32
	ch_layout			_Ctype_struct_AVChannelLayout
	frame_size			_Ctype_int
	block_align			_Ctype_int
	cutoff				_Ctype_int
	audio_service_type		uint32
	request_sample_fmt		int32
	initial_padding			_Ctype_int
	trailing_padding		_Ctype_int
	seek_preroll			_Ctype_int
	get_buffer2			*[0]byte
	bit_rate_tolerance		_Ctype_int
	global_quality			_Ctype_int
	compression_level		_Ctype_int
	qcompress			_Ctype_float
	qblur				_Ctype_float
	qmin				_Ctype_int
	qmax				_Ctype_int
	max_qdiff			_Ctype_int
	rc_buffer_size			_Ctype_int
	rc_override_count		_Ctype_int
	rc_override			*_Ctype_struct_RcOverride
	rc_max_rate			_Ctype_int64_t
	rc_min_rate			_Ctype_int64_t
	rc_max_available_vbv_use	_Ctype_float
	rc_min_vbv_overflow_use		_Ctype_float
	rc_initial_buffer_occupancy	_Ctype_int
	trellis				_Ctype_int
	stats_out			*_Ctype_char
	stats_in			*_Ctype_char
	workaround_bugs			_Ctype_int
	strict_std_compliance		_Ctype_int
	error_concealment		_Ctype_int
	debug				_Ctype_int
	err_recognition			_Ctype_int
	hwaccel				*_Ctype_struct_AVHWAccel
	hwaccel_context			unsafe.Pointer
	hw_frames_ctx			*_Ctype_struct_AVBufferRef
	hw_device_ctx			*_Ctype_struct_AVBufferRef
	hwaccel_flags			_Ctype_int
	extra_hw_frames			_Ctype_int
	error				[8]_Ctype_uint64_t
	dct_algo			_Ctype_int
	idct_algo			_Ctype_int
	bits_per_coded_sample		_Ctype_int
	bits_per_raw_sample		_Ctype_int
	thread_count			_Ctype_int
	thread_type			_Ctype_int
	active_thread_type		_Ctype_int
	execute				*[0]byte
	execute2			*[0]byte
	profile				_Ctype_int
	level				_Ctype_int
	properties			_Ctype_uint
	skip_loop_filter		int32
	skip_idct			int32
	skip_frame			int32
	skip_alpha			_Ctype_int
	skip_top			_Ctype_int
	skip_bottom			_Ctype_int
	lowres				_Ctype_int
	codec_descriptor		*_Ctype_struct_AVCodecDescriptor
	sub_charenc			*_Ctype_char
	sub_charenc_mode		_Ctype_int
	subtitle_header_size		_Ctype_int
	subtitle_header			*_Ctype_uint8_t
	dump_separator			*_Ctype_uint8_t
	codec_whitelist			*_Ctype_char
	coded_side_data			*_Ctype_struct_AVPacketSideData
	nb_coded_side_data		_Ctype_int
	export_side_data		_Ctype_int
	max_pixels			_Ctype_int64_t
	apply_cropping			_Ctype_int
	discard_damaged_percentage	_Ctype_int
	max_samples			_Ctype_int64_t
	get_encode_buffer		*[0]byte
	frame_num			_Ctype_int64_t
	side_data_prefer_packet		*_Ctype_int
	nb_side_data_prefer_packet	_Ctype_uint
	decoded_side_data		**_Ctype_struct_AVFrameSideData
	nb_decoded_side_data		_Ctype_int
	_				[4]byte
}
  */

message CodecInternal {

}

/*
typedef struct AVCodecInternal {
     int is_copy;
     int is_frame_mt;
     int pad_samples;
     struct FramePool *pool;
     struct AVRefStructPool *progress_frame_pool;
     void *thread_ctx;
     AVPacket *in_pkt;
     struct AVBSFContext *bsf;
     AVPacket *last_pkt_props;
     uint8_t *byte_buffer;
     unsigned int byte_buffer_size;
     void *frame_thread_encoder;
     AVFrame *in_frame;
     AVFrame *recon_frame;
     int needs_close;
     int skip_samples;
     void *hwaccel_priv_data;
     int draining;
     AVPacket *buffer_pkt;
     AVFrame *buffer_frame;
     int draining_done;
 #if CONFIG_LCMS2
     FFIccContext icc; 
 #endif
     int warned_on_failed_allocation_from_fixed_pool;
 } AVCodecInternal;
*/ 

message f {
	repeated Stream streams = 7;
}

/*
typedef struct AVFormatContext {
	 const AVClass *av_class;
	 const struct AVInputFormat *iformat;
	 const struct AVOutputFormat *oformat;
	 void *priv_data;
	 AVIOContext *pb;
	 int ctx_flags;
	 unsigned int nb_streams;
	 AVStream **streams;
	 unsigned int nb_stream_groups;
	 AVStreamGroup **stream_groups;
	 unsigned int nb_chapters;
	 AVChapter **chapters;
	 char *url;
	 int64_t start_time;
	 int64_t duration;
	 int64_t bit_rate;
	 unsigned int packet_size;
	 int max_delay;
 	 int flags;
 	 int64_t probesize;
 	 int64_t max_analyze_duration;
	 const uint8_t *key;
	 int keylen;
	 unsigned int nb_programs;
	 AVProgram **programs;
 	 enum AVCodecID video_codec_id;
 	 enum AVCodecID audio_codec_id;
 	 enum AVCodecID subtitle_codec_id;
 	 enum AVCodecID data_codec_id;
 	 AVDictionary *metadata;
 	 int64_t start_time_realtime;
 	 int fps_probe_size;
 	 int error_recognition;
 	 AVIOInterruptCB interrupt_callback;
 	 int debug;
 	 int max_streams;
	 unsigned int max_index_size;
	 unsigned int max_picture_buffer;
	 int64_t max_interleave_delta;
	 int max_ts_probe;
	 int max_chunk_duration;
	 int max_chunk_size;
	 int max_probe_packets;
	 int strict_std_compliance;
	 int event_flags;
	 int avoid_negative_ts;
	 int audio_preload;
	 int use_wallclock_as_timestamps;
	 int skip_estimate_duration_from_pts;
	 int avio_flags;
	 enum AVDurationEstimationMethod duration_estimation_method;
	 int64_t skip_initial_bytes;
	 unsigned int correct_ts_overflow;
	 int seek2any;
	 int flush_packets;
	 int probe_score;
	 int format_probesize;
	 char *codec_whitelist;
	 char *format_whitelist;
	 char *protocol_whitelist;
	 char *protocol_blacklist;
	 int io_repositioned;
	 const struct AVCodec *video_codec;
	 const struct AVCodec *audio_codec;
	 const struct AVCodec *subtitle_codec;
	 const struct AVCodec *data_codec;
	 int metadata_header_padding;
	 void *opaque;
	 av_format_control_message control_message_cb;
	 int64_t output_ts_offset;
	 uint8_t *dump_separator;
	 int (*io_open)(struct AVFormatContext *s, AVIOContext **pb, const char *url,
					int flags, AVDictionary **options);
	 int (*io_close2)(struct AVFormatContext *s, AVIOContext *pb);
	 int64_t duration_probesize;
 } AVFormatContext;
 */