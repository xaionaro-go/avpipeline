// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v3.21.12
// source: libav.proto

package libav

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SideDataElement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type uint32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *SideDataElement) Reset() {
	*x = SideDataElement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_libav_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SideDataElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SideDataElement) ProtoMessage() {}

func (x *SideDataElement) ProtoReflect() protoreflect.Message {
	mi := &file_libav_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SideDataElement.ProtoReflect.Descriptor instead.
func (*SideDataElement) Descriptor() ([]byte, []int) {
	return file_libav_proto_rawDescGZIP(), []int{0}
}

func (x *SideDataElement) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *SideDataElement) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type SideData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Elements []*SideDataElement `protobuf:"bytes,1,rep,name=elements,proto3" json:"elements,omitempty"`
}

func (x *SideData) Reset() {
	*x = SideData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_libav_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SideData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SideData) ProtoMessage() {}

func (x *SideData) ProtoReflect() protoreflect.Message {
	mi := &file_libav_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SideData.ProtoReflect.Descriptor instead.
func (*SideData) Descriptor() ([]byte, []int) {
	return file_libav_proto_rawDescGZIP(), []int{1}
}

func (x *SideData) GetElements() []*SideDataElement {
	if x != nil {
		return x.Elements
	}
	return nil
}

type Rational struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	N int64 `protobuf:"varint,1,opt,name=N,proto3" json:"N,omitempty"`
	D int64 `protobuf:"varint,2,opt,name=D,proto3" json:"D,omitempty"`
}

func (x *Rational) Reset() {
	*x = Rational{}
	if protoimpl.UnsafeEnabled {
		mi := &file_libav_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rational) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rational) ProtoMessage() {}

func (x *Rational) ProtoReflect() protoreflect.Message {
	mi := &file_libav_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rational.ProtoReflect.Descriptor instead.
func (*Rational) Descriptor() ([]byte, []int) {
	return file_libav_proto_rawDescGZIP(), []int{2}
}

func (x *Rational) GetN() int64 {
	if x != nil {
		return x.N
	}
	return 0
}

func (x *Rational) GetD() int64 {
	if x != nil {
		return x.D
	}
	return 0
}

type Packet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pts         int64     `protobuf:"varint,1,opt,name=pts,proto3" json:"pts,omitempty"`
	Dts         int64     `protobuf:"varint,2,opt,name=dts,proto3" json:"dts,omitempty"`
	Data        []byte    `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	StreamIndex int32     `protobuf:"varint,4,opt,name=streamIndex,proto3" json:"streamIndex,omitempty"`
	Flags       uint32    `protobuf:"varint,5,opt,name=flags,proto3" json:"flags,omitempty"`
	SideData    *SideData `protobuf:"bytes,6,opt,name=sideData,proto3" json:"sideData,omitempty"`
	Duration    int64     `protobuf:"varint,7,opt,name=duration,proto3" json:"duration,omitempty"`
	Pos         int64     `protobuf:"varint,8,opt,name=pos,proto3" json:"pos,omitempty"`
	TimeBase    *Rational `protobuf:"bytes,9,opt,name=timeBase,proto3" json:"timeBase,omitempty"`
}

func (x *Packet) Reset() {
	*x = Packet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_libav_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Packet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Packet) ProtoMessage() {}

func (x *Packet) ProtoReflect() protoreflect.Message {
	mi := &file_libav_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Packet.ProtoReflect.Descriptor instead.
func (*Packet) Descriptor() ([]byte, []int) {
	return file_libav_proto_rawDescGZIP(), []int{3}
}

func (x *Packet) GetPts() int64 {
	if x != nil {
		return x.Pts
	}
	return 0
}

func (x *Packet) GetDts() int64 {
	if x != nil {
		return x.Dts
	}
	return 0
}

func (x *Packet) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Packet) GetStreamIndex() int32 {
	if x != nil {
		return x.StreamIndex
	}
	return 0
}

func (x *Packet) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *Packet) GetSideData() *SideData {
	if x != nil {
		return x.SideData
	}
	return nil
}

func (x *Packet) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *Packet) GetPos() int64 {
	if x != nil {
		return x.Pos
	}
	return 0
}

func (x *Packet) GetTimeBase() *Rational {
	if x != nil {
		return x.TimeBase
	}
	return nil
}

type ChannelLayout struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Order      uint32 `protobuf:"varint,1,opt,name=order,proto3" json:"order,omitempty"`
	NbChannels int32  `protobuf:"varint,2,opt,name=nbChannels,proto3" json:"nbChannels,omitempty"`
	U          uint64 `protobuf:"varint,3,opt,name=u,proto3" json:"u,omitempty"`
}

func (x *ChannelLayout) Reset() {
	*x = ChannelLayout{}
	if protoimpl.UnsafeEnabled {
		mi := &file_libav_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelLayout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelLayout) ProtoMessage() {}

func (x *ChannelLayout) ProtoReflect() protoreflect.Message {
	mi := &file_libav_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelLayout.ProtoReflect.Descriptor instead.
func (*ChannelLayout) Descriptor() ([]byte, []int) {
	return file_libav_proto_rawDescGZIP(), []int{4}
}

func (x *ChannelLayout) GetOrder() uint32 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *ChannelLayout) GetNbChannels() int32 {
	if x != nil {
		return x.NbChannels
	}
	return 0
}

func (x *ChannelLayout) GetU() uint64 {
	if x != nil {
		return x.U
	}
	return 0
}

type CodecParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CodecType          int32          `protobuf:"varint,1,opt,name=codecType,proto3" json:"codecType,omitempty"`
	CodecID            uint32         `protobuf:"varint,2,opt,name=codecID,proto3" json:"codecID,omitempty"`
	CodecTag           uint32         `protobuf:"varint,3,opt,name=codecTag,proto3" json:"codecTag,omitempty"`
	ExtraData          []byte         `protobuf:"bytes,4,opt,name=extraData,proto3" json:"extraData,omitempty"`
	CodedSideData      *SideData      `protobuf:"bytes,5,opt,name=codedSideData,proto3" json:"codedSideData,omitempty"`
	Format             int32          `protobuf:"varint,6,opt,name=format,proto3" json:"format,omitempty"`
	BitRate            int64          `protobuf:"varint,7,opt,name=bitRate,proto3" json:"bitRate,omitempty"`
	BitsPerCodecSample int32          `protobuf:"varint,8,opt,name=bitsPerCodecSample,proto3" json:"bitsPerCodecSample,omitempty"`
	BitsPerRawSample   int32          `protobuf:"varint,9,opt,name=bitsPerRawSample,proto3" json:"bitsPerRawSample,omitempty"`
	Profile            int32          `protobuf:"varint,10,opt,name=profile,proto3" json:"profile,omitempty"`
	Level              int32          `protobuf:"varint,11,opt,name=level,proto3" json:"level,omitempty"`
	Width              int32          `protobuf:"varint,12,opt,name=width,proto3" json:"width,omitempty"`
	Height             int32          `protobuf:"varint,13,opt,name=height,proto3" json:"height,omitempty"`
	SampleAspectRatio  *Rational      `protobuf:"bytes,14,opt,name=sampleAspectRatio,proto3" json:"sampleAspectRatio,omitempty"`
	Framerate          *Rational      `protobuf:"bytes,15,opt,name=framerate,proto3" json:"framerate,omitempty"`
	FieldOrder         uint32         `protobuf:"varint,16,opt,name=fieldOrder,proto3" json:"fieldOrder,omitempty"`
	ColorRange         uint32         `protobuf:"varint,17,opt,name=colorRange,proto3" json:"colorRange,omitempty"`
	ColorTRC           uint32         `protobuf:"varint,18,opt,name=colorTRC,proto3" json:"colorTRC,omitempty"`
	ColorSpace         uint32         `protobuf:"varint,19,opt,name=colorSpace,proto3" json:"colorSpace,omitempty"`
	ChromaLocation     uint32         `protobuf:"varint,20,opt,name=chromaLocation,proto3" json:"chromaLocation,omitempty"`
	VideoDelay         int32          `protobuf:"varint,21,opt,name=videoDelay,proto3" json:"videoDelay,omitempty"`
	ChLayout           *ChannelLayout `protobuf:"bytes,22,opt,name=chLayout,proto3" json:"chLayout,omitempty"`
	SampleRate         int32          `protobuf:"varint,23,opt,name=sampleRate,proto3" json:"sampleRate,omitempty"`
	BlockAlign         int32          `protobuf:"varint,24,opt,name=blockAlign,proto3" json:"blockAlign,omitempty"`
	FrameSize          int32          `protobuf:"varint,25,opt,name=frameSize,proto3" json:"frameSize,omitempty"`
	InitialPadding     int32          `protobuf:"varint,26,opt,name=initialPadding,proto3" json:"initialPadding,omitempty"`
	TrailingPadding    int32          `protobuf:"varint,27,opt,name=trailingPadding,proto3" json:"trailingPadding,omitempty"`
	SeekPreroll        int32          `protobuf:"varint,28,opt,name=seekPreroll,proto3" json:"seekPreroll,omitempty"`
}

func (x *CodecParameters) Reset() {
	*x = CodecParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_libav_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodecParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodecParameters) ProtoMessage() {}

func (x *CodecParameters) ProtoReflect() protoreflect.Message {
	mi := &file_libav_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodecParameters.ProtoReflect.Descriptor instead.
func (*CodecParameters) Descriptor() ([]byte, []int) {
	return file_libav_proto_rawDescGZIP(), []int{5}
}

func (x *CodecParameters) GetCodecType() int32 {
	if x != nil {
		return x.CodecType
	}
	return 0
}

func (x *CodecParameters) GetCodecID() uint32 {
	if x != nil {
		return x.CodecID
	}
	return 0
}

func (x *CodecParameters) GetCodecTag() uint32 {
	if x != nil {
		return x.CodecTag
	}
	return 0
}

func (x *CodecParameters) GetExtraData() []byte {
	if x != nil {
		return x.ExtraData
	}
	return nil
}

func (x *CodecParameters) GetCodedSideData() *SideData {
	if x != nil {
		return x.CodedSideData
	}
	return nil
}

func (x *CodecParameters) GetFormat() int32 {
	if x != nil {
		return x.Format
	}
	return 0
}

func (x *CodecParameters) GetBitRate() int64 {
	if x != nil {
		return x.BitRate
	}
	return 0
}

func (x *CodecParameters) GetBitsPerCodecSample() int32 {
	if x != nil {
		return x.BitsPerCodecSample
	}
	return 0
}

func (x *CodecParameters) GetBitsPerRawSample() int32 {
	if x != nil {
		return x.BitsPerRawSample
	}
	return 0
}

func (x *CodecParameters) GetProfile() int32 {
	if x != nil {
		return x.Profile
	}
	return 0
}

func (x *CodecParameters) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *CodecParameters) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *CodecParameters) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *CodecParameters) GetSampleAspectRatio() *Rational {
	if x != nil {
		return x.SampleAspectRatio
	}
	return nil
}

func (x *CodecParameters) GetFramerate() *Rational {
	if x != nil {
		return x.Framerate
	}
	return nil
}

func (x *CodecParameters) GetFieldOrder() uint32 {
	if x != nil {
		return x.FieldOrder
	}
	return 0
}

func (x *CodecParameters) GetColorRange() uint32 {
	if x != nil {
		return x.ColorRange
	}
	return 0
}

func (x *CodecParameters) GetColorTRC() uint32 {
	if x != nil {
		return x.ColorTRC
	}
	return 0
}

func (x *CodecParameters) GetColorSpace() uint32 {
	if x != nil {
		return x.ColorSpace
	}
	return 0
}

func (x *CodecParameters) GetChromaLocation() uint32 {
	if x != nil {
		return x.ChromaLocation
	}
	return 0
}

func (x *CodecParameters) GetVideoDelay() int32 {
	if x != nil {
		return x.VideoDelay
	}
	return 0
}

func (x *CodecParameters) GetChLayout() *ChannelLayout {
	if x != nil {
		return x.ChLayout
	}
	return nil
}

func (x *CodecParameters) GetSampleRate() int32 {
	if x != nil {
		return x.SampleRate
	}
	return 0
}

func (x *CodecParameters) GetBlockAlign() int32 {
	if x != nil {
		return x.BlockAlign
	}
	return 0
}

func (x *CodecParameters) GetFrameSize() int32 {
	if x != nil {
		return x.FrameSize
	}
	return 0
}

func (x *CodecParameters) GetInitialPadding() int32 {
	if x != nil {
		return x.InitialPadding
	}
	return 0
}

func (x *CodecParameters) GetTrailingPadding() int32 {
	if x != nil {
		return x.TrailingPadding
	}
	return 0
}

func (x *CodecParameters) GetSeekPreroll() int32 {
	if x != nil {
		return x.SeekPreroll
	}
	return 0
}

type DictionaryItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *DictionaryItem) Reset() {
	*x = DictionaryItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_libav_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DictionaryItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DictionaryItem) ProtoMessage() {}

func (x *DictionaryItem) ProtoReflect() protoreflect.Message {
	mi := &file_libav_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DictionaryItem.ProtoReflect.Descriptor instead.
func (*DictionaryItem) Descriptor() ([]byte, []int) {
	return file_libav_proto_rawDescGZIP(), []int{6}
}

func (x *DictionaryItem) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *DictionaryItem) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type Dictionary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*DictionaryItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *Dictionary) Reset() {
	*x = Dictionary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_libav_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dictionary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dictionary) ProtoMessage() {}

func (x *Dictionary) ProtoReflect() protoreflect.Message {
	mi := &file_libav_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dictionary.ProtoReflect.Descriptor instead.
func (*Dictionary) Descriptor() ([]byte, []int) {
	return file_libav_proto_rawDescGZIP(), []int{7}
}

func (x *Dictionary) GetItems() []*DictionaryItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type Stream struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index             int32            `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	CodecParameters   *CodecParameters `protobuf:"bytes,2,opt,name=codecParameters,proto3" json:"codecParameters,omitempty"`
	TimeBase          *Rational        `protobuf:"bytes,3,opt,name=timeBase,proto3" json:"timeBase,omitempty"`
	StartTime         int64            `protobuf:"varint,4,opt,name=startTime,proto3" json:"startTime,omitempty"`
	Duration          int64            `protobuf:"varint,5,opt,name=duration,proto3" json:"duration,omitempty"`
	NbFrames          int64            `protobuf:"varint,6,opt,name=nbFrames,proto3" json:"nbFrames,omitempty"`
	Disposition       int32            `protobuf:"varint,7,opt,name=disposition,proto3" json:"disposition,omitempty"`
	Discard           int32            `protobuf:"varint,8,opt,name=discard,proto3" json:"discard,omitempty"`
	SampleAspectRatio *Rational        `protobuf:"bytes,9,opt,name=sampleAspectRatio,proto3" json:"sampleAspectRatio,omitempty"`
	Metadata          *Dictionary      `protobuf:"bytes,10,opt,name=Metadata,proto3" json:"Metadata,omitempty"`
	AvgFrameRate      *Rational        `protobuf:"bytes,11,opt,name=avgFrameRate,proto3" json:"avgFrameRate,omitempty"`
	AttachedPic       *Packet          `protobuf:"bytes,12,opt,name=AttachedPic,proto3" json:"AttachedPic,omitempty"`
	SideData          *SideData        `protobuf:"bytes,13,opt,name=SideData,proto3" json:"SideData,omitempty"`
	EventFlags        int32            `protobuf:"varint,14,opt,name=eventFlags,proto3" json:"eventFlags,omitempty"`
	RFrameRate        *Rational        `protobuf:"bytes,15,opt,name=rFrameRate,proto3" json:"rFrameRate,omitempty"`
	PtsWrapBits       int32            `protobuf:"varint,16,opt,name=ptsWrapBits,proto3" json:"ptsWrapBits,omitempty"`
}

func (x *Stream) Reset() {
	*x = Stream{}
	if protoimpl.UnsafeEnabled {
		mi := &file_libav_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stream) ProtoMessage() {}

func (x *Stream) ProtoReflect() protoreflect.Message {
	mi := &file_libav_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stream.ProtoReflect.Descriptor instead.
func (*Stream) Descriptor() ([]byte, []int) {
	return file_libav_proto_rawDescGZIP(), []int{8}
}

func (x *Stream) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Stream) GetCodecParameters() *CodecParameters {
	if x != nil {
		return x.CodecParameters
	}
	return nil
}

func (x *Stream) GetTimeBase() *Rational {
	if x != nil {
		return x.TimeBase
	}
	return nil
}

func (x *Stream) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *Stream) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *Stream) GetNbFrames() int64 {
	if x != nil {
		return x.NbFrames
	}
	return 0
}

func (x *Stream) GetDisposition() int32 {
	if x != nil {
		return x.Disposition
	}
	return 0
}

func (x *Stream) GetDiscard() int32 {
	if x != nil {
		return x.Discard
	}
	return 0
}

func (x *Stream) GetSampleAspectRatio() *Rational {
	if x != nil {
		return x.SampleAspectRatio
	}
	return nil
}

func (x *Stream) GetMetadata() *Dictionary {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Stream) GetAvgFrameRate() *Rational {
	if x != nil {
		return x.AvgFrameRate
	}
	return nil
}

func (x *Stream) GetAttachedPic() *Packet {
	if x != nil {
		return x.AttachedPic
	}
	return nil
}

func (x *Stream) GetSideData() *SideData {
	if x != nil {
		return x.SideData
	}
	return nil
}

func (x *Stream) GetEventFlags() int32 {
	if x != nil {
		return x.EventFlags
	}
	return 0
}

func (x *Stream) GetRFrameRate() *Rational {
	if x != nil {
		return x.RFrameRate
	}
	return nil
}

func (x *Stream) GetPtsWrapBits() int32 {
	if x != nil {
		return x.PtsWrapBits
	}
	return 0
}

type Frame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data                [][]byte       `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	Linesize            []int32        `protobuf:"varint,2,rep,packed,name=linesize,proto3" json:"linesize,omitempty"`
	ExtendedData        [][]byte       `protobuf:"bytes,3,rep,name=extendedData,proto3" json:"extendedData,omitempty"`
	Width               int32          `protobuf:"varint,4,opt,name=width,proto3" json:"width,omitempty"`
	Height              int32          `protobuf:"varint,5,opt,name=height,proto3" json:"height,omitempty"`
	NbSamples           int32          `protobuf:"varint,6,opt,name=nbSamples,proto3" json:"nbSamples,omitempty"`
	Format              int32          `protobuf:"varint,7,opt,name=format,proto3" json:"format,omitempty"`
	KeyFrame            int32          `protobuf:"varint,8,opt,name=keyFrame,proto3" json:"keyFrame,omitempty"`
	PictType            uint32         `protobuf:"varint,9,opt,name=pictType,proto3" json:"pictType,omitempty"`
	SampleAspectRatio   *Rational      `protobuf:"bytes,10,opt,name=sampleAspectRatio,proto3" json:"sampleAspectRatio,omitempty"`
	Pts                 int64          `protobuf:"varint,11,opt,name=pts,proto3" json:"pts,omitempty"`
	PktDts              int64          `protobuf:"varint,12,opt,name=pkt_dts,json=pktDts,proto3" json:"pkt_dts,omitempty"`
	TimeBase            *Rational      `protobuf:"bytes,13,opt,name=timeBase,proto3" json:"timeBase,omitempty"`
	Quality             int32          `protobuf:"varint,14,opt,name=quality,proto3" json:"quality,omitempty"`
	RepeatPict          int32          `protobuf:"varint,15,opt,name=repeatPict,proto3" json:"repeatPict,omitempty"`
	InterlacedFrame     int32          `protobuf:"varint,16,opt,name=interlacedFrame,proto3" json:"interlacedFrame,omitempty"`
	TopFieldFirst       int32          `protobuf:"varint,17,opt,name=topFieldFirst,proto3" json:"topFieldFirst,omitempty"`
	PaletteHasChanged   int32          `protobuf:"varint,18,opt,name=paletteHasChanged,proto3" json:"paletteHasChanged,omitempty"`
	SampleRate          int32          `protobuf:"varint,19,opt,name=sampleRate,proto3" json:"sampleRate,omitempty"`
	SideData            *SideData      `protobuf:"bytes,20,opt,name=sideData,proto3" json:"sideData,omitempty"`
	Flags               int32          `protobuf:"varint,21,opt,name=flags,proto3" json:"flags,omitempty"`
	ColorRange          uint32         `protobuf:"varint,22,opt,name=colorRange,proto3" json:"colorRange,omitempty"`
	ColorTRC            uint32         `protobuf:"varint,23,opt,name=colorTRC,proto3" json:"colorTRC,omitempty"`
	ColorSpace          uint32         `protobuf:"varint,24,opt,name=colorSpace,proto3" json:"colorSpace,omitempty"`
	ChromaLocation      uint32         `protobuf:"varint,25,opt,name=chromaLocation,proto3" json:"chromaLocation,omitempty"`
	BestEffortTimestamp int64          `protobuf:"varint,26,opt,name=bestEffortTimestamp,proto3" json:"bestEffortTimestamp,omitempty"`
	PktPos              int64          `protobuf:"varint,27,opt,name=pktPos,proto3" json:"pktPos,omitempty"`
	Metadata            *Dictionary    `protobuf:"bytes,28,opt,name=metadata,proto3" json:"metadata,omitempty"`
	DecodeErrorFlags    int32          `protobuf:"varint,29,opt,name=decodeErrorFlags,proto3" json:"decodeErrorFlags,omitempty"`
	PktSize             int32          `protobuf:"varint,30,opt,name=pktSize,proto3" json:"pktSize,omitempty"`
	CropTop             uint64         `protobuf:"varint,31,opt,name=cropTop,proto3" json:"cropTop,omitempty"`
	CropBottom          uint64         `protobuf:"varint,32,opt,name=cropBottom,proto3" json:"cropBottom,omitempty"`
	CropLeft            uint64         `protobuf:"varint,33,opt,name=cropLeft,proto3" json:"cropLeft,omitempty"`
	CropRight           uint64         `protobuf:"varint,34,opt,name=cropRight,proto3" json:"cropRight,omitempty"`
	ChLayout            *ChannelLayout `protobuf:"bytes,35,opt,name=chLayout,proto3" json:"chLayout,omitempty"`
	Duration            int64          `protobuf:"varint,36,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (x *Frame) Reset() {
	*x = Frame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_libav_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Frame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Frame) ProtoMessage() {}

func (x *Frame) ProtoReflect() protoreflect.Message {
	mi := &file_libav_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Frame.ProtoReflect.Descriptor instead.
func (*Frame) Descriptor() ([]byte, []int) {
	return file_libav_proto_rawDescGZIP(), []int{9}
}

func (x *Frame) GetData() [][]byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Frame) GetLinesize() []int32 {
	if x != nil {
		return x.Linesize
	}
	return nil
}

func (x *Frame) GetExtendedData() [][]byte {
	if x != nil {
		return x.ExtendedData
	}
	return nil
}

func (x *Frame) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *Frame) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *Frame) GetNbSamples() int32 {
	if x != nil {
		return x.NbSamples
	}
	return 0
}

func (x *Frame) GetFormat() int32 {
	if x != nil {
		return x.Format
	}
	return 0
}

func (x *Frame) GetKeyFrame() int32 {
	if x != nil {
		return x.KeyFrame
	}
	return 0
}

func (x *Frame) GetPictType() uint32 {
	if x != nil {
		return x.PictType
	}
	return 0
}

func (x *Frame) GetSampleAspectRatio() *Rational {
	if x != nil {
		return x.SampleAspectRatio
	}
	return nil
}

func (x *Frame) GetPts() int64 {
	if x != nil {
		return x.Pts
	}
	return 0
}

func (x *Frame) GetPktDts() int64 {
	if x != nil {
		return x.PktDts
	}
	return 0
}

func (x *Frame) GetTimeBase() *Rational {
	if x != nil {
		return x.TimeBase
	}
	return nil
}

func (x *Frame) GetQuality() int32 {
	if x != nil {
		return x.Quality
	}
	return 0
}

func (x *Frame) GetRepeatPict() int32 {
	if x != nil {
		return x.RepeatPict
	}
	return 0
}

func (x *Frame) GetInterlacedFrame() int32 {
	if x != nil {
		return x.InterlacedFrame
	}
	return 0
}

func (x *Frame) GetTopFieldFirst() int32 {
	if x != nil {
		return x.TopFieldFirst
	}
	return 0
}

func (x *Frame) GetPaletteHasChanged() int32 {
	if x != nil {
		return x.PaletteHasChanged
	}
	return 0
}

func (x *Frame) GetSampleRate() int32 {
	if x != nil {
		return x.SampleRate
	}
	return 0
}

func (x *Frame) GetSideData() *SideData {
	if x != nil {
		return x.SideData
	}
	return nil
}

func (x *Frame) GetFlags() int32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *Frame) GetColorRange() uint32 {
	if x != nil {
		return x.ColorRange
	}
	return 0
}

func (x *Frame) GetColorTRC() uint32 {
	if x != nil {
		return x.ColorTRC
	}
	return 0
}

func (x *Frame) GetColorSpace() uint32 {
	if x != nil {
		return x.ColorSpace
	}
	return 0
}

func (x *Frame) GetChromaLocation() uint32 {
	if x != nil {
		return x.ChromaLocation
	}
	return 0
}

func (x *Frame) GetBestEffortTimestamp() int64 {
	if x != nil {
		return x.BestEffortTimestamp
	}
	return 0
}

func (x *Frame) GetPktPos() int64 {
	if x != nil {
		return x.PktPos
	}
	return 0
}

func (x *Frame) GetMetadata() *Dictionary {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Frame) GetDecodeErrorFlags() int32 {
	if x != nil {
		return x.DecodeErrorFlags
	}
	return 0
}

func (x *Frame) GetPktSize() int32 {
	if x != nil {
		return x.PktSize
	}
	return 0
}

func (x *Frame) GetCropTop() uint64 {
	if x != nil {
		return x.CropTop
	}
	return 0
}

func (x *Frame) GetCropBottom() uint64 {
	if x != nil {
		return x.CropBottom
	}
	return 0
}

func (x *Frame) GetCropLeft() uint64 {
	if x != nil {
		return x.CropLeft
	}
	return 0
}

func (x *Frame) GetCropRight() uint64 {
	if x != nil {
		return x.CropRight
	}
	return 0
}

func (x *Frame) GetChLayout() *ChannelLayout {
	if x != nil {
		return x.ChLayout
	}
	return nil
}

func (x *Frame) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

type Class struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Class) Reset() {
	*x = Class{}
	if protoimpl.UnsafeEnabled {
		mi := &file_libav_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Class) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Class) ProtoMessage() {}

func (x *Class) ProtoReflect() protoreflect.Message {
	mi := &file_libav_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Class.ProtoReflect.Descriptor instead.
func (*Class) Descriptor() ([]byte, []int) {
	return file_libav_proto_rawDescGZIP(), []int{10}
}

type CodecContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvClass        *Class `protobuf:"bytes,1,opt,name=avClass,proto3" json:"avClass,omitempty"`
	LogLevelOffset int32  `protobuf:"varint,2,opt,name=logLevelOffset,proto3" json:"logLevelOffset,omitempty"`
	CodecType      int32  `protobuf:"varint,3,opt,name=codecType,proto3" json:"codecType,omitempty"`
	CodecID        uint32 `protobuf:"varint,4,opt,name=codecID,proto3" json:"codecID,omitempty"`
	CodecTag       uint32 `protobuf:"varint,5,opt,name=codecTag,proto3" json:"codecTag,omitempty"`
}

func (x *CodecContext) Reset() {
	*x = CodecContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_libav_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodecContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodecContext) ProtoMessage() {}

func (x *CodecContext) ProtoReflect() protoreflect.Message {
	mi := &file_libav_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodecContext.ProtoReflect.Descriptor instead.
func (*CodecContext) Descriptor() ([]byte, []int) {
	return file_libav_proto_rawDescGZIP(), []int{11}
}

func (x *CodecContext) GetAvClass() *Class {
	if x != nil {
		return x.AvClass
	}
	return nil
}

func (x *CodecContext) GetLogLevelOffset() int32 {
	if x != nil {
		return x.LogLevelOffset
	}
	return 0
}

func (x *CodecContext) GetCodecType() int32 {
	if x != nil {
		return x.CodecType
	}
	return 0
}

func (x *CodecContext) GetCodecID() uint32 {
	if x != nil {
		return x.CodecID
	}
	return 0
}

func (x *CodecContext) GetCodecTag() uint32 {
	if x != nil {
		return x.CodecTag
	}
	return 0
}

type CodecInternal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CodecInternal) Reset() {
	*x = CodecInternal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_libav_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodecInternal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodecInternal) ProtoMessage() {}

func (x *CodecInternal) ProtoReflect() protoreflect.Message {
	mi := &file_libav_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodecInternal.ProtoReflect.Descriptor instead.
func (*CodecInternal) Descriptor() ([]byte, []int) {
	return file_libav_proto_rawDescGZIP(), []int{12}
}

type FormatContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Streams []*Stream `protobuf:"bytes,7,rep,name=streams,proto3" json:"streams,omitempty"`
}

func (x *FormatContext) Reset() {
	*x = FormatContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_libav_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FormatContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormatContext) ProtoMessage() {}

func (x *FormatContext) ProtoReflect() protoreflect.Message {
	mi := &file_libav_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormatContext.ProtoReflect.Descriptor instead.
func (*FormatContext) Descriptor() ([]byte, []int) {
	return file_libav_proto_rawDescGZIP(), []int{13}
}

func (x *FormatContext) GetStreams() []*Stream {
	if x != nil {
		return x.Streams
	}
	return nil
}

var File_libav_proto protoreflect.FileDescriptor

var file_libav_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x6c, 0x69, 0x62, 0x61, 0x76, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x6c,
	0x69, 0x62, 0x61, 0x76, 0x22, 0x39, 0x0a, 0x0f, 0x53, 0x69, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x3e, 0x0a, 0x08, 0x53, 0x69, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x32, 0x0a, 0x08, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x6c, 0x69, 0x62, 0x61, 0x76, 0x2e, 0x53, 0x69, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22,
	0x26, 0x0a, 0x08, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x0c, 0x0a, 0x01, 0x4e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x01, 0x4e, 0x12, 0x0c, 0x0a, 0x01, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x01, 0x44, 0x22, 0x80, 0x02, 0x0a, 0x06, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x03, 0x70, 0x74, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x64, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05,
	0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61,
	0x67, 0x73, 0x12, 0x2b, 0x0a, 0x08, 0x73, 0x69, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6c, 0x69, 0x62, 0x61, 0x76, 0x2e, 0x53, 0x69, 0x64,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x73, 0x69, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x70,
	0x6f, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x2b, 0x0a,
	0x08, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x61, 0x73, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x6c, 0x69, 0x62, 0x61, 0x76, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x61, 0x73, 0x65, 0x22, 0x53, 0x0a, 0x0d, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x62, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6e, 0x62, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x12, 0x0c, 0x0a, 0x01, 0x75, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x01, 0x75, 0x22,
	0xdc, 0x07, 0x0a, 0x0f, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x6f, 0x64, 0x65, 0x63, 0x54, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63,
	0x6f, 0x64, 0x65, 0x63, 0x54, 0x61, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x35, 0x0a, 0x0d, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x53, 0x69,
	0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6c,
	0x69, 0x62, 0x61, 0x76, 0x2e, 0x53, 0x69, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x63,
	0x6f, 0x64, 0x65, 0x64, 0x53, 0x69, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2e,
	0x0a, 0x12, 0x62, 0x69, 0x74, 0x73, 0x50, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x53, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x62, 0x69, 0x74, 0x73,
	0x50, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x2a,
	0x0a, 0x10, 0x62, 0x69, 0x74, 0x73, 0x50, 0x65, 0x72, 0x52, 0x61, 0x77, 0x53, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x62, 0x69, 0x74, 0x73, 0x50, 0x65,
	0x72, 0x52, 0x61, 0x77, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x3d, 0x0a, 0x11, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x41, 0x73, 0x70, 0x65, 0x63, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6c, 0x69, 0x62, 0x61, 0x76, 0x2e, 0x52, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x11, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x41, 0x73, 0x70, 0x65,
	0x63, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x2d, 0x0a, 0x09, 0x66, 0x72, 0x61, 0x6d, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6c, 0x69, 0x62,
	0x61, 0x76, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x09, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x54,
	0x52, 0x43, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x54,
	0x52, 0x43, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x53, 0x70, 0x61, 0x63, 0x65,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x61, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x68, 0x72, 0x6f,
	0x6d, 0x61, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x30, 0x0a, 0x08, 0x63, 0x68,
	0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6c,
	0x69, 0x62, 0x61, 0x76, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x61, 0x79, 0x6f,
	0x75, 0x74, 0x52, 0x08, 0x63, 0x68, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x61, 0x74, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x12, 0x1c, 0x0a, 0x09,
	0x66, 0x72, 0x61, 0x6d, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x6c, 0x50, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x50, 0x61, 0x64, 0x64, 0x69,
	0x6e, 0x67, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x61,
	0x64, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x74, 0x72, 0x61,
	0x69, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x20, 0x0a, 0x0b,
	0x73, 0x65, 0x65, 0x6b, 0x50, 0x72, 0x65, 0x72, 0x6f, 0x6c, 0x6c, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x73, 0x65, 0x65, 0x6b, 0x50, 0x72, 0x65, 0x72, 0x6f, 0x6c, 0x6c, 0x22, 0x38,
	0x0a, 0x0e, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x39, 0x0a, 0x0a, 0x44, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6c, 0x69, 0x62, 0x61, 0x76, 0x2e, 0x44, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x22, 0x93, 0x05, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x40, 0x0a, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x6c, 0x69, 0x62, 0x61, 0x76, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2b, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x61,
	0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6c, 0x69, 0x62, 0x61, 0x76,
	0x2e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x42,
	0x61, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x6e, 0x62, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x6e, 0x62, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x64,
	0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x64, 0x69,
	0x73, 0x63, 0x61, 0x72, 0x64, 0x12, 0x3d, 0x0a, 0x11, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x41,
	0x73, 0x70, 0x65, 0x63, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x6c, 0x69, 0x62, 0x61, 0x76, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x52, 0x11, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x41, 0x73, 0x70, 0x65, 0x63, 0x74, 0x52,
	0x61, 0x74, 0x69, 0x6f, 0x12, 0x2d, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6c, 0x69, 0x62, 0x61, 0x76, 0x2e, 0x44,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x33, 0x0a, 0x0c, 0x61, 0x76, 0x67, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x52,
	0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6c, 0x69, 0x62, 0x61,
	0x76, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x0c, 0x61, 0x76, 0x67, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x0a, 0x0b, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x65, 0x64, 0x50, 0x69, 0x63, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x6c, 0x69, 0x62, 0x61, 0x76, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x0b, 0x41, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x50, 0x69, 0x63, 0x12, 0x2b, 0x0a, 0x08, 0x53, 0x69, 0x64,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6c, 0x69,
	0x62, 0x61, 0x76, 0x2e, 0x53, 0x69, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x53, 0x69,
	0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x46,
	0x6c, 0x61, 0x67, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x2f, 0x0a, 0x0a, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x52, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6c, 0x69, 0x62,
	0x61, 0x76, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x0a, 0x72, 0x46, 0x72,
	0x61, 0x6d, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x74, 0x73, 0x57, 0x72,
	0x61, 0x70, 0x42, 0x69, 0x74, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x74,
	0x73, 0x57, 0x72, 0x61, 0x70, 0x42, 0x69, 0x74, 0x73, 0x22, 0xae, 0x09, 0x0a, 0x05, 0x46, 0x72,
	0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x69, 0x6e, 0x65, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x69, 0x6e, 0x65, 0x73,
	0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0c, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x64, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a,
	0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x62, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6e, 0x62, 0x53, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6b,
	0x65, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6b,
	0x65, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x69, 0x63, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x69, 0x63, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x11, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x41, 0x73, 0x70,
	0x65, 0x63, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x6c, 0x69, 0x62, 0x61, 0x76, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x52,
	0x11, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x41, 0x73, 0x70, 0x65, 0x63, 0x74, 0x52, 0x61, 0x74,
	0x69, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x03, 0x70, 0x74, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6b, 0x74, 0x5f, 0x64, 0x74, 0x73, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x6b, 0x74, 0x44, 0x74, 0x73, 0x12, 0x2b, 0x0a,
	0x08, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x61, 0x73, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x6c, 0x69, 0x62, 0x61, 0x76, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x61, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x71, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x71, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x50, 0x69,
	0x63, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74,
	0x50, 0x69, 0x63, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6c, 0x61, 0x63,
	0x65, 0x64, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x74, 0x6f, 0x70, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x46, 0x69, 0x72, 0x73, 0x74, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x74, 0x6f, 0x70, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x46,
	0x69, 0x72, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x70, 0x61, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x48,
	0x61, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x11, 0x70, 0x61, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x48, 0x61, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x61, 0x74, 0x65,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x61,
	0x74, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x73, 0x69, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6c, 0x69, 0x62, 0x61, 0x76, 0x2e, 0x53, 0x69, 0x64,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x73, 0x69, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x54, 0x52,
	0x43, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x54, 0x52,
	0x43, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x53, 0x70, 0x61, 0x63, 0x65, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x61, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x68, 0x72, 0x6f, 0x6d,
	0x61, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x13, 0x62, 0x65, 0x73,
	0x74, 0x45, 0x66, 0x66, 0x6f, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x62, 0x65, 0x73, 0x74, 0x45, 0x66, 0x66, 0x6f,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x70,
	0x6b, 0x74, 0x50, 0x6f, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x6b, 0x74,
	0x50, 0x6f, 0x73, 0x12, 0x2d, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6c, 0x69, 0x62, 0x61, 0x76, 0x2e, 0x44, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x2a, 0x0a, 0x10, 0x64, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x64, 0x65,
	0x63, 0x6f, 0x64, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x6b, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x70, 0x6b, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x6f, 0x70,
	0x54, 0x6f, 0x70, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x63, 0x72, 0x6f, 0x70, 0x54,
	0x6f, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x6f, 0x70, 0x42, 0x6f, 0x74, 0x74, 0x6f, 0x6d,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x63, 0x72, 0x6f, 0x70, 0x42, 0x6f, 0x74, 0x74,
	0x6f, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72, 0x6f, 0x70, 0x4c, 0x65, 0x66, 0x74, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x72, 0x6f, 0x70, 0x4c, 0x65, 0x66, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x72, 0x6f, 0x70, 0x52, 0x69, 0x67, 0x68, 0x74, 0x18, 0x22, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x63, 0x72, 0x6f, 0x70, 0x52, 0x69, 0x67, 0x68, 0x74, 0x12, 0x30, 0x0a, 0x08,
	0x63, 0x68, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x6c, 0x69, 0x62, 0x61, 0x76, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x61,
	0x79, 0x6f, 0x75, 0x74, 0x52, 0x08, 0x63, 0x68, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x24, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x07, 0x0a, 0x05, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x22, 0xb2, 0x01, 0x0a, 0x0c, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x26, 0x0a, 0x07, 0x61, 0x76, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6c, 0x69, 0x62, 0x61, 0x76, 0x2e, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x52, 0x07, 0x61, 0x76, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x26, 0x0a, 0x0e,
	0x6c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x49, 0x44, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x6f, 0x64, 0x65, 0x63, 0x54, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x63, 0x6f, 0x64, 0x65, 0x63, 0x54, 0x61, 0x67, 0x22, 0x0f, 0x0a, 0x0d, 0x43, 0x6f, 0x64, 0x65,
	0x63, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x22, 0x38, 0x0a, 0x0d, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x27, 0x0a, 0x07, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6c, 0x69,
	0x62, 0x61, 0x76, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x07, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x73, 0x42, 0x38, 0x5a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x78, 0x61, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x6f, 0x2d, 0x67, 0x6f, 0x2f, 0x61, 0x76,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x6c, 0x69, 0x62, 0x61, 0x76, 0x3b, 0x6c, 0x69, 0x62, 0x61, 0x76, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_libav_proto_rawDescOnce sync.Once
	file_libav_proto_rawDescData = file_libav_proto_rawDesc
)

func file_libav_proto_rawDescGZIP() []byte {
	file_libav_proto_rawDescOnce.Do(func() {
		file_libav_proto_rawDescData = protoimpl.X.CompressGZIP(file_libav_proto_rawDescData)
	})
	return file_libav_proto_rawDescData
}

var file_libav_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_libav_proto_goTypes = []interface{}{
	(*SideDataElement)(nil), // 0: libav.SideDataElement
	(*SideData)(nil),        // 1: libav.SideData
	(*Rational)(nil),        // 2: libav.Rational
	(*Packet)(nil),          // 3: libav.Packet
	(*ChannelLayout)(nil),   // 4: libav.ChannelLayout
	(*CodecParameters)(nil), // 5: libav.CodecParameters
	(*DictionaryItem)(nil),  // 6: libav.DictionaryItem
	(*Dictionary)(nil),      // 7: libav.Dictionary
	(*Stream)(nil),          // 8: libav.Stream
	(*Frame)(nil),           // 9: libav.Frame
	(*Class)(nil),           // 10: libav.Class
	(*CodecContext)(nil),    // 11: libav.CodecContext
	(*CodecInternal)(nil),   // 12: libav.CodecInternal
	(*FormatContext)(nil),   // 13: libav.FormatContext
}
var file_libav_proto_depIdxs = []int32{
	0,  // 0: libav.SideData.elements:type_name -> libav.SideDataElement
	1,  // 1: libav.Packet.sideData:type_name -> libav.SideData
	2,  // 2: libav.Packet.timeBase:type_name -> libav.Rational
	1,  // 3: libav.CodecParameters.codedSideData:type_name -> libav.SideData
	2,  // 4: libav.CodecParameters.sampleAspectRatio:type_name -> libav.Rational
	2,  // 5: libav.CodecParameters.framerate:type_name -> libav.Rational
	4,  // 6: libav.CodecParameters.chLayout:type_name -> libav.ChannelLayout
	6,  // 7: libav.Dictionary.items:type_name -> libav.DictionaryItem
	5,  // 8: libav.Stream.codecParameters:type_name -> libav.CodecParameters
	2,  // 9: libav.Stream.timeBase:type_name -> libav.Rational
	2,  // 10: libav.Stream.sampleAspectRatio:type_name -> libav.Rational
	7,  // 11: libav.Stream.Metadata:type_name -> libav.Dictionary
	2,  // 12: libav.Stream.avgFrameRate:type_name -> libav.Rational
	3,  // 13: libav.Stream.AttachedPic:type_name -> libav.Packet
	1,  // 14: libav.Stream.SideData:type_name -> libav.SideData
	2,  // 15: libav.Stream.rFrameRate:type_name -> libav.Rational
	2,  // 16: libav.Frame.sampleAspectRatio:type_name -> libav.Rational
	2,  // 17: libav.Frame.timeBase:type_name -> libav.Rational
	1,  // 18: libav.Frame.sideData:type_name -> libav.SideData
	7,  // 19: libav.Frame.metadata:type_name -> libav.Dictionary
	4,  // 20: libav.Frame.chLayout:type_name -> libav.ChannelLayout
	10, // 21: libav.CodecContext.avClass:type_name -> libav.Class
	8,  // 22: libav.FormatContext.streams:type_name -> libav.Stream
	23, // [23:23] is the sub-list for method output_type
	23, // [23:23] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_libav_proto_init() }
func file_libav_proto_init() {
	if File_libav_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_libav_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SideDataElement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_libav_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SideData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_libav_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rational); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_libav_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Packet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_libav_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelLayout); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_libav_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodecParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_libav_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DictionaryItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_libav_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dictionary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_libav_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stream); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_libav_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Frame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_libav_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Class); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_libav_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodecContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_libav_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodecInternal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_libav_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FormatContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_libav_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_libav_proto_goTypes,
		DependencyIndexes: file_libav_proto_depIdxs,
		MessageInfos:      file_libav_proto_msgTypes,
	}.Build()
	File_libav_proto = out.File
	file_libav_proto_rawDesc = nil
	file_libav_proto_goTypes = nil
	file_libav_proto_depIdxs = nil
}
