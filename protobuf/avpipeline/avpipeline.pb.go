// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.21.12
// source: avpipeline.proto

package avpipeline

import (
	libav "github.com/xaionaro-go/avpipeline/protobuf/libav"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Node struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Id                  string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type                string                 `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Description         string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	IsServing           bool                   `protobuf:"varint,4,opt,name=isServing,proto3" json:"isServing,omitempty"`
	Statistics          *NodeStatistics        `protobuf:"bytes,5,opt,name=statistics,proto3" json:"statistics,omitempty"`
	TODOPublishingNodes []*Node                `protobuf:"bytes,6,rep,name=TODO_publishingNodes,json=TODOPublishingNodes,proto3" json:"TODO_publishingNodes,omitempty"` // is not currently reported
	ConsumingNodes      []*Node                `protobuf:"bytes,7,rep,name=consumingNodes,proto3" json:"consumingNodes,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *Node) Reset() {
	*x = Node{}
	mi := &file_avpipeline_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_avpipeline_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_avpipeline_proto_rawDescGZIP(), []int{0}
}

func (x *Node) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Node) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Node) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Node) GetIsServing() bool {
	if x != nil {
		return x.IsServing
	}
	return false
}

func (x *Node) GetStatistics() *NodeStatistics {
	if x != nil {
		return x.Statistics
	}
	return nil
}

func (x *Node) GetTODOPublishingNodes() []*Node {
	if x != nil {
		return x.TODOPublishingNodes
	}
	return nil
}

func (x *Node) GetConsumingNodes() []*Node {
	if x != nil {
		return x.ConsumingNodes
	}
	return nil
}

type NodeStatistics struct {
	state           protoimpl.MessageState     `protogen:"open.v1"`
	BytesCountRead  uint64                     `protobuf:"varint,1,opt,name=bytesCountRead,proto3" json:"bytesCountRead,omitempty"`
	BytesCountWrote uint64                     `protobuf:"varint,2,opt,name=bytesCountWrote,proto3" json:"bytesCountWrote,omitempty"`
	Packets         *FramesOrPacketsStatistics `protobuf:"bytes,3,opt,name=packets,proto3" json:"packets,omitempty"`
	Frames          *FramesOrPacketsStatistics `protobuf:"bytes,4,opt,name=frames,proto3" json:"frames,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *NodeStatistics) Reset() {
	*x = NodeStatistics{}
	mi := &file_avpipeline_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NodeStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeStatistics) ProtoMessage() {}

func (x *NodeStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_avpipeline_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeStatistics.ProtoReflect.Descriptor instead.
func (*NodeStatistics) Descriptor() ([]byte, []int) {
	return file_avpipeline_proto_rawDescGZIP(), []int{1}
}

func (x *NodeStatistics) GetBytesCountRead() uint64 {
	if x != nil {
		return x.BytesCountRead
	}
	return 0
}

func (x *NodeStatistics) GetBytesCountWrote() uint64 {
	if x != nil {
		return x.BytesCountWrote
	}
	return 0
}

func (x *NodeStatistics) GetPackets() *FramesOrPacketsStatistics {
	if x != nil {
		return x.Packets
	}
	return nil
}

func (x *NodeStatistics) GetFrames() *FramesOrPacketsStatistics {
	if x != nil {
		return x.Frames
	}
	return nil
}

type FramesOrPacketsStatistics struct {
	state         protoimpl.MessageState            `protogen:"open.v1"`
	Read          *FramesOrPacketsStatisticsSection `protobuf:"bytes,3,opt,name=read,proto3" json:"read,omitempty"`
	Missed        *FramesOrPacketsStatisticsSection `protobuf:"bytes,4,opt,name=missed,proto3" json:"missed,omitempty"`
	Wrote         *FramesOrPacketsStatisticsSection `protobuf:"bytes,5,opt,name=wrote,proto3" json:"wrote,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FramesOrPacketsStatistics) Reset() {
	*x = FramesOrPacketsStatistics{}
	mi := &file_avpipeline_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FramesOrPacketsStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FramesOrPacketsStatistics) ProtoMessage() {}

func (x *FramesOrPacketsStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_avpipeline_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FramesOrPacketsStatistics.ProtoReflect.Descriptor instead.
func (*FramesOrPacketsStatistics) Descriptor() ([]byte, []int) {
	return file_avpipeline_proto_rawDescGZIP(), []int{2}
}

func (x *FramesOrPacketsStatistics) GetRead() *FramesOrPacketsStatisticsSection {
	if x != nil {
		return x.Read
	}
	return nil
}

func (x *FramesOrPacketsStatistics) GetMissed() *FramesOrPacketsStatisticsSection {
	if x != nil {
		return x.Missed
	}
	return nil
}

func (x *FramesOrPacketsStatistics) GetWrote() *FramesOrPacketsStatisticsSection {
	if x != nil {
		return x.Wrote
	}
	return nil
}

type FramesOrPacketsStatisticsSection struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Unknown       uint64                 `protobuf:"varint,1,opt,name=unknown,proto3" json:"unknown,omitempty"`
	Other         uint64                 `protobuf:"varint,2,opt,name=other,proto3" json:"other,omitempty"`
	Video         uint64                 `protobuf:"varint,3,opt,name=video,proto3" json:"video,omitempty"`
	Audio         uint64                 `protobuf:"varint,4,opt,name=audio,proto3" json:"audio,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FramesOrPacketsStatisticsSection) Reset() {
	*x = FramesOrPacketsStatisticsSection{}
	mi := &file_avpipeline_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FramesOrPacketsStatisticsSection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FramesOrPacketsStatisticsSection) ProtoMessage() {}

func (x *FramesOrPacketsStatisticsSection) ProtoReflect() protoreflect.Message {
	mi := &file_avpipeline_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FramesOrPacketsStatisticsSection.ProtoReflect.Descriptor instead.
func (*FramesOrPacketsStatisticsSection) Descriptor() ([]byte, []int) {
	return file_avpipeline_proto_rawDescGZIP(), []int{3}
}

func (x *FramesOrPacketsStatisticsSection) GetUnknown() uint64 {
	if x != nil {
		return x.Unknown
	}
	return 0
}

func (x *FramesOrPacketsStatisticsSection) GetOther() uint64 {
	if x != nil {
		return x.Other
	}
	return 0
}

func (x *FramesOrPacketsStatisticsSection) GetVideo() uint64 {
	if x != nil {
		return x.Video
	}
	return 0
}

func (x *FramesOrPacketsStatisticsSection) GetAudio() uint64 {
	if x != nil {
		return x.Audio
	}
	return 0
}

type Object struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          uint32                 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Data          []byte                 `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Object) Reset() {
	*x = Object{}
	mi := &file_avpipeline_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Object) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Object) ProtoMessage() {}

func (x *Object) ProtoReflect() protoreflect.Message {
	mi := &file_avpipeline_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Object.ProtoReflect.Descriptor instead.
func (*Object) Descriptor() ([]byte, []int) {
	return file_avpipeline_proto_rawDescGZIP(), []int{4}
}

func (x *Object) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Object) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type Frame struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Frame          *libav.Frame           `protobuf:"bytes,1,opt,name=frame,proto3" json:"frame,omitempty"`
	CodecContext   *libav.CodecContext    `protobuf:"bytes,2,opt,name=codecContext,proto3" json:"codecContext,omitempty"`
	StreamIndex    int32                  `protobuf:"varint,3,opt,name=streamIndex,proto3" json:"streamIndex,omitempty"`
	StreamsCount   int32                  `protobuf:"varint,4,opt,name=streamsCount,proto3" json:"streamsCount,omitempty"`
	StreamDuration int64                  `protobuf:"varint,5,opt,name=streamDuration,proto3" json:"streamDuration,omitempty"`
	TimeBase       *libav.Rational        `protobuf:"bytes,6,opt,name=timeBase,proto3" json:"timeBase,omitempty"`
	Pos            int64                  `protobuf:"varint,7,opt,name=pos,proto3" json:"pos,omitempty"`
	Duration       int64                  `protobuf:"varint,8,opt,name=duration,proto3" json:"duration,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Frame) Reset() {
	*x = Frame{}
	mi := &file_avpipeline_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Frame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Frame) ProtoMessage() {}

func (x *Frame) ProtoReflect() protoreflect.Message {
	mi := &file_avpipeline_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Frame.ProtoReflect.Descriptor instead.
func (*Frame) Descriptor() ([]byte, []int) {
	return file_avpipeline_proto_rawDescGZIP(), []int{5}
}

func (x *Frame) GetFrame() *libav.Frame {
	if x != nil {
		return x.Frame
	}
	return nil
}

func (x *Frame) GetCodecContext() *libav.CodecContext {
	if x != nil {
		return x.CodecContext
	}
	return nil
}

func (x *Frame) GetStreamIndex() int32 {
	if x != nil {
		return x.StreamIndex
	}
	return 0
}

func (x *Frame) GetStreamsCount() int32 {
	if x != nil {
		return x.StreamsCount
	}
	return 0
}

func (x *Frame) GetStreamDuration() int64 {
	if x != nil {
		return x.StreamDuration
	}
	return 0
}

func (x *Frame) GetTimeBase() *libav.Rational {
	if x != nil {
		return x.TimeBase
	}
	return nil
}

func (x *Frame) GetPos() int64 {
	if x != nil {
		return x.Pos
	}
	return 0
}

func (x *Frame) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

type AutoBitrateCalculator struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to AutoBitrateCalculator:
	//
	//	*AutoBitrateCalculator_Thresholds
	//	*AutoBitrateCalculator_LogK
	AutoBitrateCalculator isAutoBitrateCalculator_AutoBitrateCalculator `protobuf_oneof:"AutoBitrateCalculator"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *AutoBitrateCalculator) Reset() {
	*x = AutoBitrateCalculator{}
	mi := &file_avpipeline_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AutoBitrateCalculator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoBitrateCalculator) ProtoMessage() {}

func (x *AutoBitrateCalculator) ProtoReflect() protoreflect.Message {
	mi := &file_avpipeline_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoBitrateCalculator.ProtoReflect.Descriptor instead.
func (*AutoBitrateCalculator) Descriptor() ([]byte, []int) {
	return file_avpipeline_proto_rawDescGZIP(), []int{6}
}

func (x *AutoBitrateCalculator) GetAutoBitrateCalculator() isAutoBitrateCalculator_AutoBitrateCalculator {
	if x != nil {
		return x.AutoBitrateCalculator
	}
	return nil
}

func (x *AutoBitrateCalculator) GetThresholds() *AutoBitRateCalculatorThresholds {
	if x != nil {
		if x, ok := x.AutoBitrateCalculator.(*AutoBitrateCalculator_Thresholds); ok {
			return x.Thresholds
		}
	}
	return nil
}

func (x *AutoBitrateCalculator) GetLogK() *AutoBitrateCalculatorLogK {
	if x != nil {
		if x, ok := x.AutoBitrateCalculator.(*AutoBitrateCalculator_LogK); ok {
			return x.LogK
		}
	}
	return nil
}

type isAutoBitrateCalculator_AutoBitrateCalculator interface {
	isAutoBitrateCalculator_AutoBitrateCalculator()
}

type AutoBitrateCalculator_Thresholds struct {
	Thresholds *AutoBitRateCalculatorThresholds `protobuf:"bytes,1,opt,name=thresholds,proto3,oneof"`
}

type AutoBitrateCalculator_LogK struct {
	LogK *AutoBitrateCalculatorLogK `protobuf:"bytes,2,opt,name=logK,proto3,oneof"`
}

func (*AutoBitrateCalculator_Thresholds) isAutoBitrateCalculator_AutoBitrateCalculator() {}

func (*AutoBitrateCalculator_LogK) isAutoBitrateCalculator_AutoBitrateCalculator() {}

type AutoBitRateCalculatorThresholds struct {
	state                                  protoimpl.MessageState `protogen:"open.v1"`
	OutputExtremelyHighQueueSizeDurationMS uint64                 `protobuf:"varint,1,opt,name=outputExtremelyHighQueueSizeDurationMS,proto3" json:"outputExtremelyHighQueueSizeDurationMS,omitempty"`
	OutputVeryHighQueueSizeDurationMS      uint64                 `protobuf:"varint,2,opt,name=outputVeryHighQueueSizeDurationMS,proto3" json:"outputVeryHighQueueSizeDurationMS,omitempty"`
	OutputHighQueueSizeDurationMS          uint64                 `protobuf:"varint,3,opt,name=outputHighQueueSizeDurationMS,proto3" json:"outputHighQueueSizeDurationMS,omitempty"`
	OutputLowQueueSizeDurationMS           uint64                 `protobuf:"varint,4,opt,name=outputLowQueueSizeDurationMS,proto3" json:"outputLowQueueSizeDurationMS,omitempty"`
	OutputVeryLowQueueSizeDurationMS       uint64                 `protobuf:"varint,5,opt,name=outputVeryLowQueueSizeDurationMS,proto3" json:"outputVeryLowQueueSizeDurationMS,omitempty"`
	IncreaseK                              float64                `protobuf:"fixed64,6,opt,name=increaseK,proto3" json:"increaseK,omitempty"`
	DecreaseK                              float64                `protobuf:"fixed64,7,opt,name=decreaseK,proto3" json:"decreaseK,omitempty"`
	QuickIncreaseK                         float64                `protobuf:"fixed64,8,opt,name=quickIncreaseK,proto3" json:"quickIncreaseK,omitempty"`
	QuickDecreaseK                         float64                `protobuf:"fixed64,9,opt,name=quickDecreaseK,proto3" json:"quickDecreaseK,omitempty"`
	ExtremeDecreaseK                       float64                `protobuf:"fixed64,10,opt,name=extremeDecreaseK,proto3" json:"extremeDecreaseK,omitempty"`
	unknownFields                          protoimpl.UnknownFields
	sizeCache                              protoimpl.SizeCache
}

func (x *AutoBitRateCalculatorThresholds) Reset() {
	*x = AutoBitRateCalculatorThresholds{}
	mi := &file_avpipeline_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AutoBitRateCalculatorThresholds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoBitRateCalculatorThresholds) ProtoMessage() {}

func (x *AutoBitRateCalculatorThresholds) ProtoReflect() protoreflect.Message {
	mi := &file_avpipeline_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoBitRateCalculatorThresholds.ProtoReflect.Descriptor instead.
func (*AutoBitRateCalculatorThresholds) Descriptor() ([]byte, []int) {
	return file_avpipeline_proto_rawDescGZIP(), []int{7}
}

func (x *AutoBitRateCalculatorThresholds) GetOutputExtremelyHighQueueSizeDurationMS() uint64 {
	if x != nil {
		return x.OutputExtremelyHighQueueSizeDurationMS
	}
	return 0
}

func (x *AutoBitRateCalculatorThresholds) GetOutputVeryHighQueueSizeDurationMS() uint64 {
	if x != nil {
		return x.OutputVeryHighQueueSizeDurationMS
	}
	return 0
}

func (x *AutoBitRateCalculatorThresholds) GetOutputHighQueueSizeDurationMS() uint64 {
	if x != nil {
		return x.OutputHighQueueSizeDurationMS
	}
	return 0
}

func (x *AutoBitRateCalculatorThresholds) GetOutputLowQueueSizeDurationMS() uint64 {
	if x != nil {
		return x.OutputLowQueueSizeDurationMS
	}
	return 0
}

func (x *AutoBitRateCalculatorThresholds) GetOutputVeryLowQueueSizeDurationMS() uint64 {
	if x != nil {
		return x.OutputVeryLowQueueSizeDurationMS
	}
	return 0
}

func (x *AutoBitRateCalculatorThresholds) GetIncreaseK() float64 {
	if x != nil {
		return x.IncreaseK
	}
	return 0
}

func (x *AutoBitRateCalculatorThresholds) GetDecreaseK() float64 {
	if x != nil {
		return x.DecreaseK
	}
	return 0
}

func (x *AutoBitRateCalculatorThresholds) GetQuickIncreaseK() float64 {
	if x != nil {
		return x.QuickIncreaseK
	}
	return 0
}

func (x *AutoBitRateCalculatorThresholds) GetQuickDecreaseK() float64 {
	if x != nil {
		return x.QuickDecreaseK
	}
	return 0
}

func (x *AutoBitRateCalculatorThresholds) GetExtremeDecreaseK() float64 {
	if x != nil {
		return x.ExtremeDecreaseK
	}
	return 0
}

type MovingAverageConfigMAMA struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FastLimit     float64                `protobuf:"fixed64,1,opt,name=fastLimit,proto3" json:"fastLimit,omitempty"`
	SlowLimit     float64                `protobuf:"fixed64,2,opt,name=slowLimit,proto3" json:"slowLimit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MovingAverageConfigMAMA) Reset() {
	*x = MovingAverageConfigMAMA{}
	mi := &file_avpipeline_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MovingAverageConfigMAMA) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MovingAverageConfigMAMA) ProtoMessage() {}

func (x *MovingAverageConfigMAMA) ProtoReflect() protoreflect.Message {
	mi := &file_avpipeline_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MovingAverageConfigMAMA.ProtoReflect.Descriptor instead.
func (*MovingAverageConfigMAMA) Descriptor() ([]byte, []int) {
	return file_avpipeline_proto_rawDescGZIP(), []int{8}
}

func (x *MovingAverageConfigMAMA) GetFastLimit() float64 {
	if x != nil {
		return x.FastLimit
	}
	return 0
}

func (x *MovingAverageConfigMAMA) GetSlowLimit() float64 {
	if x != nil {
		return x.SlowLimit
	}
	return 0
}

type MovingAverageConfigOther struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	JsonConfig    string                 `protobuf:"bytes,1,opt,name=jsonConfig,proto3" json:"jsonConfig,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MovingAverageConfigOther) Reset() {
	*x = MovingAverageConfigOther{}
	mi := &file_avpipeline_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MovingAverageConfigOther) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MovingAverageConfigOther) ProtoMessage() {}

func (x *MovingAverageConfigOther) ProtoReflect() protoreflect.Message {
	mi := &file_avpipeline_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MovingAverageConfigOther.ProtoReflect.Descriptor instead.
func (*MovingAverageConfigOther) Descriptor() ([]byte, []int) {
	return file_avpipeline_proto_rawDescGZIP(), []int{9}
}

func (x *MovingAverageConfigOther) GetJsonConfig() string {
	if x != nil {
		return x.JsonConfig
	}
	return ""
}

type MovingAverageConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to MovingAverageConfig:
	//
	//	*MovingAverageConfig_Mama
	//	*MovingAverageConfig_Other
	MovingAverageConfig isMovingAverageConfig_MovingAverageConfig `protobuf_oneof:"MovingAverageConfig"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *MovingAverageConfig) Reset() {
	*x = MovingAverageConfig{}
	mi := &file_avpipeline_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MovingAverageConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MovingAverageConfig) ProtoMessage() {}

func (x *MovingAverageConfig) ProtoReflect() protoreflect.Message {
	mi := &file_avpipeline_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MovingAverageConfig.ProtoReflect.Descriptor instead.
func (*MovingAverageConfig) Descriptor() ([]byte, []int) {
	return file_avpipeline_proto_rawDescGZIP(), []int{10}
}

func (x *MovingAverageConfig) GetMovingAverageConfig() isMovingAverageConfig_MovingAverageConfig {
	if x != nil {
		return x.MovingAverageConfig
	}
	return nil
}

func (x *MovingAverageConfig) GetMama() *MovingAverageConfigMAMA {
	if x != nil {
		if x, ok := x.MovingAverageConfig.(*MovingAverageConfig_Mama); ok {
			return x.Mama
		}
	}
	return nil
}

func (x *MovingAverageConfig) GetOther() *MovingAverageConfigOther {
	if x != nil {
		if x, ok := x.MovingAverageConfig.(*MovingAverageConfig_Other); ok {
			return x.Other
		}
	}
	return nil
}

type isMovingAverageConfig_MovingAverageConfig interface {
	isMovingAverageConfig_MovingAverageConfig()
}

type MovingAverageConfig_Mama struct {
	Mama *MovingAverageConfigMAMA `protobuf:"bytes,1,opt,name=mama,proto3,oneof"`
}

type MovingAverageConfig_Other struct {
	Other *MovingAverageConfigOther `protobuf:"bytes,65535,opt,name=other,proto3,oneof"`
}

func (*MovingAverageConfig_Mama) isMovingAverageConfig_MovingAverageConfig() {}

func (*MovingAverageConfig_Other) isMovingAverageConfig_MovingAverageConfig() {}

type AutoBitrateCalculatorLogK struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	QueueOptimalMS uint64                 `protobuf:"varint,1,opt,name=queueOptimalMS,proto3" json:"queueOptimalMS,omitempty"`
	Inertia        float64                `protobuf:"fixed64,2,opt,name=inertia,proto3" json:"inertia,omitempty"` // [0.0..1.0]
	MovingAverage  *MovingAverageConfig   `protobuf:"bytes,3,opt,name=movingAverage,proto3" json:"movingAverage,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *AutoBitrateCalculatorLogK) Reset() {
	*x = AutoBitrateCalculatorLogK{}
	mi := &file_avpipeline_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AutoBitrateCalculatorLogK) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoBitrateCalculatorLogK) ProtoMessage() {}

func (x *AutoBitrateCalculatorLogK) ProtoReflect() protoreflect.Message {
	mi := &file_avpipeline_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoBitrateCalculatorLogK.ProtoReflect.Descriptor instead.
func (*AutoBitrateCalculatorLogK) Descriptor() ([]byte, []int) {
	return file_avpipeline_proto_rawDescGZIP(), []int{11}
}

func (x *AutoBitrateCalculatorLogK) GetQueueOptimalMS() uint64 {
	if x != nil {
		return x.QueueOptimalMS
	}
	return 0
}

func (x *AutoBitrateCalculatorLogK) GetInertia() float64 {
	if x != nil {
		return x.Inertia
	}
	return 0
}

func (x *AutoBitrateCalculatorLogK) GetMovingAverage() *MovingAverageConfig {
	if x != nil {
		return x.MovingAverage
	}
	return nil
}

var File_avpipeline_proto protoreflect.FileDescriptor

var file_avpipeline_proto_rawDesc = string([]byte{
	0x0a, 0x10, 0x61, 0x76, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0a, 0x61, 0x76, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x1a, 0x0b,
	0x6c, 0x69, 0x62, 0x61, 0x76, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa5, 0x02, 0x0a, 0x04,
	0x4e, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69,
	0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x12, 0x3a, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61,
	0x76, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x12, 0x43, 0x0a, 0x14, 0x54, 0x4f, 0x44, 0x4f, 0x5f, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x76, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x13, 0x54, 0x4f, 0x44, 0x4f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x0e, 0x63, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x61, 0x76, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x69, 0x6e, 0x67, 0x4e, 0x6f,
	0x64, 0x65, 0x73, 0x22, 0xe2, 0x01, 0x0a, 0x0e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x62, 0x79, 0x74, 0x65, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x64, 0x12, 0x28,
	0x0a, 0x0f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x57, 0x72, 0x6f, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x57, 0x72, 0x6f, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x07, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x76, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x4f, 0x72, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x52, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x3d, 0x0a, 0x06, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x76, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x4f, 0x72, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x52, 0x06, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x22, 0xe7, 0x01, 0x0a, 0x19, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x73, 0x4f, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x40, 0x0a, 0x04, 0x72, 0x65, 0x61, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x76, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x4f, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x53, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x04, 0x72, 0x65, 0x61, 0x64, 0x12, 0x44, 0x0a, 0x06, 0x6d, 0x69, 0x73, 0x73,
	0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x76, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x4f, 0x72, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x53,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x12, 0x42,
	0x0a, 0x05, 0x77, 0x72, 0x6f, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x61, 0x76, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x73, 0x4f, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x77, 0x72, 0x6f,
	0x74, 0x65, 0x22, 0x7e, 0x0a, 0x20, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x4f, 0x72, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x53,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x12, 0x14, 0x0a, 0x05,
	0x61, 0x75, 0x64, 0x69, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x61, 0x75, 0x64,
	0x69, 0x6f, 0x22, 0x30, 0x0a, 0x06, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0xad, 0x02, 0x0a, 0x05, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x22,
	0x0a, 0x05, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x6c, 0x69, 0x62, 0x61, 0x76, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x05, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x12, 0x37, 0x0a, 0x0c, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6c, 0x69, 0x62, 0x61, 0x76,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0c, 0x63,
	0x6f, 0x64, 0x65, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x22, 0x0a,
	0x0c, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x08, 0x74, 0x69, 0x6d,
	0x65, 0x42, 0x61, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6c, 0x69,
	0x62, 0x61, 0x76, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x08, 0x74, 0x69,
	0x6d, 0x65, 0x42, 0x61, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xbc, 0x01, 0x0a, 0x15, 0x41, 0x75, 0x74, 0x6f, 0x42, 0x69, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x4d,
	0x0a, 0x0a, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x76, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e,
	0x41, 0x75, 0x74, 0x6f, 0x42, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x63, 0x75,
	0x6c, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x48,
	0x00, 0x52, 0x0a, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x12, 0x3b, 0x0a,
	0x04, 0x6c, 0x6f, 0x67, 0x4b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x76,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x42, 0x69, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x4c, 0x6f,
	0x67, 0x4b, 0x48, 0x00, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x4b, 0x42, 0x17, 0x0a, 0x15, 0x41, 0x75,
	0x74, 0x6f, 0x42, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61,
	0x74, 0x6f, 0x72, 0x22, 0xd5, 0x04, 0x0a, 0x1f, 0x41, 0x75, 0x74, 0x6f, 0x42, 0x69, 0x74, 0x52,
	0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x12, 0x56, 0x0a, 0x26, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x45, 0x78, 0x74, 0x72, 0x65, 0x6d, 0x65, 0x6c, 0x79, 0x48, 0x69, 0x67, 0x68, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x53, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x26, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x45,
	0x78, 0x74, 0x72, 0x65, 0x6d, 0x65, 0x6c, 0x79, 0x48, 0x69, 0x67, 0x68, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x53, 0x12,
	0x4c, 0x0a, 0x21, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x56, 0x65, 0x72, 0x79, 0x48, 0x69, 0x67,
	0x68, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x53, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x21, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x56, 0x65, 0x72, 0x79, 0x48, 0x69, 0x67, 0x68, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x53, 0x12, 0x44, 0x0a,
	0x1d, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x48, 0x69, 0x67, 0x68, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x53, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x1d, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x48, 0x69, 0x67, 0x68,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x53, 0x12, 0x42, 0x0a, 0x1c, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4c, 0x6f, 0x77,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x53, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1c, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x4c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x53, 0x12, 0x4a, 0x0a, 0x20, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x56, 0x65, 0x72, 0x79, 0x4c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x53, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x20, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x56, 0x65, 0x72, 0x79, 0x4c, 0x6f, 0x77,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x53, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x4b,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65,
	0x4b, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x4b, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x4b, 0x12,
	0x26, 0x0a, 0x0e, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65,
	0x4b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x49, 0x6e,
	0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x4b, 0x12, 0x26, 0x0a, 0x0e, 0x71, 0x75, 0x69, 0x63, 0x6b,
	0x44, 0x65, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x4b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0e, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x44, 0x65, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x4b, 0x12,
	0x2a, 0x0a, 0x10, 0x65, 0x78, 0x74, 0x72, 0x65, 0x6d, 0x65, 0x44, 0x65, 0x63, 0x72, 0x65, 0x61,
	0x73, 0x65, 0x4b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x65, 0x78, 0x74, 0x72, 0x65,
	0x6d, 0x65, 0x44, 0x65, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x4b, 0x22, 0x55, 0x0a, 0x17, 0x4d,
	0x6f, 0x76, 0x69, 0x6e, 0x67, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x4d, 0x41, 0x4d, 0x41, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x61, 0x73, 0x74, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x66, 0x61, 0x73, 0x74, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x6c, 0x6f, 0x77, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x73, 0x6c, 0x6f, 0x77, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x22, 0x3a, 0x0a, 0x18, 0x4d, 0x6f, 0x76, 0x69, 0x6e, 0x67, 0x41, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x12, 0x1e,
	0x0a, 0x0a, 0x6a, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6a, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xa7,
	0x01, 0x0a, 0x13, 0x4d, 0x6f, 0x76, 0x69, 0x6e, 0x67, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x39, 0x0a, 0x04, 0x6d, 0x61, 0x6d, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x76, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x2e, 0x4d, 0x6f, 0x76, 0x69, 0x6e, 0x67, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x41, 0x4d, 0x41, 0x48, 0x00, 0x52, 0x04, 0x6d, 0x61, 0x6d,
	0x61, 0x12, 0x3e, 0x0a, 0x05, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x18, 0xff, 0xff, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x76, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e,
	0x4d, 0x6f, 0x76, 0x69, 0x6e, 0x67, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x48, 0x00, 0x52, 0x05, 0x6f, 0x74, 0x68, 0x65,
	0x72, 0x42, 0x15, 0x0a, 0x13, 0x4d, 0x6f, 0x76, 0x69, 0x6e, 0x67, 0x41, 0x76, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xa4, 0x01, 0x0a, 0x19, 0x41, 0x75, 0x74,
	0x6f, 0x42, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74,
	0x6f, 0x72, 0x4c, 0x6f, 0x67, 0x4b, 0x12, 0x26, 0x0a, 0x0e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x4f,
	0x70, 0x74, 0x69, 0x6d, 0x61, 0x6c, 0x4d, 0x53, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x61, 0x6c, 0x4d, 0x53, 0x12, 0x18,
	0x0a, 0x07, 0x69, 0x6e, 0x65, 0x72, 0x74, 0x69, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x07, 0x69, 0x6e, 0x65, 0x72, 0x74, 0x69, 0x61, 0x12, 0x45, 0x0a, 0x0d, 0x6d, 0x6f, 0x76, 0x69,
	0x6e, 0x67, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x61, 0x76, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x4d, 0x6f, 0x76,
	0x69, 0x6e, 0x67, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x0d, 0x6d, 0x6f, 0x76, 0x69, 0x6e, 0x67, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x42,
	0x42, 0x5a, 0x40, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x78, 0x61,
	0x69, 0x6f, 0x6e, 0x61, 0x72, 0x6f, 0x2d, 0x67, 0x6f, 0x2f, 0x61, 0x76, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x76,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x3b, 0x61, 0x76, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_avpipeline_proto_rawDescOnce sync.Once
	file_avpipeline_proto_rawDescData []byte
)

func file_avpipeline_proto_rawDescGZIP() []byte {
	file_avpipeline_proto_rawDescOnce.Do(func() {
		file_avpipeline_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_avpipeline_proto_rawDesc), len(file_avpipeline_proto_rawDesc)))
	})
	return file_avpipeline_proto_rawDescData
}

var file_avpipeline_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_avpipeline_proto_goTypes = []any{
	(*Node)(nil),                             // 0: avpipeline.Node
	(*NodeStatistics)(nil),                   // 1: avpipeline.NodeStatistics
	(*FramesOrPacketsStatistics)(nil),        // 2: avpipeline.FramesOrPacketsStatistics
	(*FramesOrPacketsStatisticsSection)(nil), // 3: avpipeline.FramesOrPacketsStatisticsSection
	(*Object)(nil),                           // 4: avpipeline.Object
	(*Frame)(nil),                            // 5: avpipeline.Frame
	(*AutoBitrateCalculator)(nil),            // 6: avpipeline.AutoBitrateCalculator
	(*AutoBitRateCalculatorThresholds)(nil),  // 7: avpipeline.AutoBitRateCalculatorThresholds
	(*MovingAverageConfigMAMA)(nil),          // 8: avpipeline.MovingAverageConfigMAMA
	(*MovingAverageConfigOther)(nil),         // 9: avpipeline.MovingAverageConfigOther
	(*MovingAverageConfig)(nil),              // 10: avpipeline.MovingAverageConfig
	(*AutoBitrateCalculatorLogK)(nil),        // 11: avpipeline.AutoBitrateCalculatorLogK
	(*libav.Frame)(nil),                      // 12: libav.Frame
	(*libav.CodecContext)(nil),               // 13: libav.CodecContext
	(*libav.Rational)(nil),                   // 14: libav.Rational
}
var file_avpipeline_proto_depIdxs = []int32{
	1,  // 0: avpipeline.Node.statistics:type_name -> avpipeline.NodeStatistics
	0,  // 1: avpipeline.Node.TODO_publishingNodes:type_name -> avpipeline.Node
	0,  // 2: avpipeline.Node.consumingNodes:type_name -> avpipeline.Node
	2,  // 3: avpipeline.NodeStatistics.packets:type_name -> avpipeline.FramesOrPacketsStatistics
	2,  // 4: avpipeline.NodeStatistics.frames:type_name -> avpipeline.FramesOrPacketsStatistics
	3,  // 5: avpipeline.FramesOrPacketsStatistics.read:type_name -> avpipeline.FramesOrPacketsStatisticsSection
	3,  // 6: avpipeline.FramesOrPacketsStatistics.missed:type_name -> avpipeline.FramesOrPacketsStatisticsSection
	3,  // 7: avpipeline.FramesOrPacketsStatistics.wrote:type_name -> avpipeline.FramesOrPacketsStatisticsSection
	12, // 8: avpipeline.Frame.frame:type_name -> libav.Frame
	13, // 9: avpipeline.Frame.codecContext:type_name -> libav.CodecContext
	14, // 10: avpipeline.Frame.timeBase:type_name -> libav.Rational
	7,  // 11: avpipeline.AutoBitrateCalculator.thresholds:type_name -> avpipeline.AutoBitRateCalculatorThresholds
	11, // 12: avpipeline.AutoBitrateCalculator.logK:type_name -> avpipeline.AutoBitrateCalculatorLogK
	8,  // 13: avpipeline.MovingAverageConfig.mama:type_name -> avpipeline.MovingAverageConfigMAMA
	9,  // 14: avpipeline.MovingAverageConfig.other:type_name -> avpipeline.MovingAverageConfigOther
	10, // 15: avpipeline.AutoBitrateCalculatorLogK.movingAverage:type_name -> avpipeline.MovingAverageConfig
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_avpipeline_proto_init() }
func file_avpipeline_proto_init() {
	if File_avpipeline_proto != nil {
		return
	}
	file_avpipeline_proto_msgTypes[6].OneofWrappers = []any{
		(*AutoBitrateCalculator_Thresholds)(nil),
		(*AutoBitrateCalculator_LogK)(nil),
	}
	file_avpipeline_proto_msgTypes[10].OneofWrappers = []any{
		(*MovingAverageConfig_Mama)(nil),
		(*MovingAverageConfig_Other)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_avpipeline_proto_rawDesc), len(file_avpipeline_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_avpipeline_proto_goTypes,
		DependencyIndexes: file_avpipeline_proto_depIdxs,
		MessageInfos:      file_avpipeline_proto_msgTypes,
	}.Build()
	File_avpipeline_proto = out.File
	file_avpipeline_proto_goTypes = nil
	file_avpipeline_proto_depIdxs = nil
}
